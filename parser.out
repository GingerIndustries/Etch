Grammar:

Rule 0     S' -> statements
Rule 1     statements -> statement
Rule 2     statements -> statements statement
Rule 3     statement -> command SEMICOLON
Rule 4     statement -> command NEWLINE
Rule 5     empty -> <empty>
Rule 6     command -> swap
Rule 7     command -> inplace
Rule 8     command -> somecrement
Rule 9     command -> assign
Rule 10    command -> count_block
Rule 11    command -> forever_block
Rule 12    command -> while_block
Rule 13    command -> for_block
Rule 14    command -> if_block
Rule 15    command -> expr
Rule 16    command -> empty
Rule 17    args -> expr
Rule 18    args -> args expr
Rule 19    if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
Rule 20    if_block -> IF error THEN NEWLINE statements elifs DONE
Rule 21    if_block -> IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
Rule 22    if_block -> IF error THEN NEWLINE statements DONE
Rule 23    if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
Rule 24    if_block -> IF expr THEN NEWLINE statements elifs DONE
Rule 25    if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
Rule 26    if_block -> IF expr THEN NEWLINE statements DONE
Rule 27    elifs -> elif_block
Rule 28    elifs -> elifs elif_block
Rule 29    elif_block -> ELSE IF command THEN statements
Rule 30    while_block -> WHILE command OPEN_CB statements CLOSE_CB
Rule 31    while_block -> WHILE command DO statements DONE
Rule 32    for_block -> FOR ID IN command OPEN_CB statements CLOSE_CB
Rule 33    for_block -> FOR ID IN command DO statements DONE
Rule 34    forever_block -> DO NEWLINE statements FOREVER
Rule 35    count_block -> DO OPEN_CB statements CLOSE_CB expr TIMES
Rule 36    count_block -> DO NEWLINE statements expr TIMES
Rule 37    expr -> OPEN_SQ list_items CLOSE_SQ
Rule 38    expr -> STRING
Rule 39    expr -> FLOAT
Rule 40    expr -> INTEGER
Rule 41    expr -> COLON ID SEMICOLON
Rule 42    expr -> COLON ID args SEMICOLON
Rule 43    expr -> expr COLON ID SEMICOLON
Rule 44    expr -> expr COLON ID args SEMICOLON
Rule 45    expr -> ID
Rule 46    expr -> NOT expr
Rule 47    expr -> SUB expr  [precedence=right, level=5]
Rule 48    expr -> expr COMPARE expr  [precedence=left, level=4]
Rule 49    expr -> expr NE expr  [precedence=nonassoc, level=1]
Rule 50    expr -> expr EQ expr  [precedence=nonassoc, level=1]
Rule 51    expr -> expr GE expr  [precedence=nonassoc, level=1]
Rule 52    expr -> expr LE expr  [precedence=nonassoc, level=1]
Rule 53    expr -> expr GT expr  [precedence=nonassoc, level=1]
Rule 54    expr -> expr LT expr  [precedence=nonassoc, level=1]
Rule 55    expr -> expr EXP expr
Rule 56    expr -> expr MOD expr  [precedence=left, level=3]
Rule 57    expr -> expr FLOORDIV expr  [precedence=left, level=3]
Rule 58    expr -> expr TRUEDIV expr  [precedence=left, level=3]
Rule 59    expr -> expr MUL expr  [precedence=left, level=3]
Rule 60    expr -> expr SUB expr  [precedence=left, level=2]
Rule 61    expr -> expr ADD expr  [precedence=left, level=2]
Rule 62    swap -> ID SWAP ID
Rule 63    somecrement -> ID DECREMENT
Rule 64    somecrement -> ID INCREMENT
Rule 65    inplace -> ID IP_DIV expr
Rule 66    inplace -> ID IP_MUL expr
Rule 67    inplace -> ID IP_SUB expr
Rule 68    inplace -> ID IP_ADD expr
Rule 69    assign -> ID ASSIGN expr
Rule 70    list_items -> expr
Rule 71    list_items -> list_items COMMA expr

Unused terminals:

    IS
    RETURN
    AND
    BUILDER
    FROM
    OPEN
    USING
    CLASS
    OR
    AS
    DEFINE

Terminals, with rules where they appear:

ADD                  : 61
AND                  : 
AS                   : 
ASSIGN               : 69
BUILDER              : 
CLASS                : 
CLOSE_CB             : 30 32 35
CLOSE_SQ             : 37
COLON                : 41 42 43 44
COMMA                : 71
COMPARE              : 48
DECREMENT            : 63
DEFINE               : 
DO                   : 31 33 34 35 36
DONE                 : 19 20 21 22 23 24 25 26 31 33
ELSE                 : 19 21 23 25 29
EQ                   : 50
EXP                  : 55
FLOAT                : 39
FLOORDIV             : 57
FOR                  : 32 33
FOREVER              : 34
FROM                 : 
GE                   : 51
GT                   : 53
ID                   : 32 33 41 42 43 44 45 62 62 63 64 65 66 67 68 69
IF                   : 19 20 21 22 23 24 25 26 29
IN                   : 32 33
INCREMENT            : 64
INTEGER              : 40
IP_ADD               : 68
IP_DIV               : 65
IP_MUL               : 66
IP_SUB               : 67
IS                   : 
LE                   : 52
LT                   : 54
MOD                  : 56
MUL                  : 59
NE                   : 49
NEWLINE              : 4 19 19 20 21 21 22 23 23 24 25 25 26 34 36
NOT                  : 46
OPEN                 : 
OPEN_CB              : 30 32 35
OPEN_SQ              : 37
OR                   : 
RETURN               : 
SEMICOLON            : 3 41 42 43 44
STRING               : 38
SUB                  : 47 60
SWAP                 : 62
THEN                 : 19 20 21 22 23 24 25 26 29
TIMES                : 35 36
TRUEDIV              : 58
USING                : 
WHILE                : 30 31
error                : 19 20 21 22

Nonterminals, with rules where they appear:

args                 : 18 42 44
assign               : 9
command              : 3 4 29 30 31 32 33
count_block          : 10
elif_block           : 27 28
elifs                : 19 20 23 24 28
empty                : 16
expr                 : 15 17 18 23 24 25 26 35 36 43 44 46 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 65 66 67 68 69 70 71
for_block            : 13
forever_block        : 11
if_block             : 14
inplace              : 7
list_items           : 37 71
somecrement          : 8
statement            : 1 2
statements           : 2 19 19 20 21 21 22 23 23 24 25 25 26 29 30 31 32 33 34 35 36 0
swap                 : 6
while_block          : 12


state 0

    (0) S' -> . statements
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    statements                     shift and go to state 1
    statement                      shift and go to state 2
    command                        shift and go to state 3
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    expr                           shift and go to state 13
    empty                          shift and go to state 14

state 1

    (0) S' -> statements .
    (2) statements -> statements . statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    statement                      shift and go to state 27
    command                        shift and go to state 3
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    expr                           shift and go to state 13
    empty                          shift and go to state 14

state 2

    (1) statements -> statement .
    ID              reduce using rule 1 (statements -> statement .)
    DO              reduce using rule 1 (statements -> statement .)
    WHILE           reduce using rule 1 (statements -> statement .)
    FOR             reduce using rule 1 (statements -> statement .)
    IF              reduce using rule 1 (statements -> statement .)
    OPEN_SQ         reduce using rule 1 (statements -> statement .)
    STRING          reduce using rule 1 (statements -> statement .)
    FLOAT           reduce using rule 1 (statements -> statement .)
    INTEGER         reduce using rule 1 (statements -> statement .)
    COLON           reduce using rule 1 (statements -> statement .)
    NOT             reduce using rule 1 (statements -> statement .)
    SUB             reduce using rule 1 (statements -> statement .)
    $end            reduce using rule 1 (statements -> statement .)
    SEMICOLON       reduce using rule 1 (statements -> statement .)
    NEWLINE         reduce using rule 1 (statements -> statement .)
    CLOSE_CB        reduce using rule 1 (statements -> statement .)
    FOREVER         reduce using rule 1 (statements -> statement .)
    DONE            reduce using rule 1 (statements -> statement .)
    ELSE            reduce using rule 1 (statements -> statement .)


state 3

    (3) statement -> command . SEMICOLON
    (4) statement -> command . NEWLINE
    SEMICOLON       shift and go to state 28
    NEWLINE         shift and go to state 29


state 4

    (6) command -> swap .
    SEMICOLON       reduce using rule 6 (command -> swap .)
    NEWLINE         reduce using rule 6 (command -> swap .)
    OPEN_CB         reduce using rule 6 (command -> swap .)
    DO              reduce using rule 6 (command -> swap .)
    THEN            reduce using rule 6 (command -> swap .)


state 5

    (7) command -> inplace .
    SEMICOLON       reduce using rule 7 (command -> inplace .)
    NEWLINE         reduce using rule 7 (command -> inplace .)
    OPEN_CB         reduce using rule 7 (command -> inplace .)
    DO              reduce using rule 7 (command -> inplace .)
    THEN            reduce using rule 7 (command -> inplace .)


state 6

    (8) command -> somecrement .
    SEMICOLON       reduce using rule 8 (command -> somecrement .)
    NEWLINE         reduce using rule 8 (command -> somecrement .)
    OPEN_CB         reduce using rule 8 (command -> somecrement .)
    DO              reduce using rule 8 (command -> somecrement .)
    THEN            reduce using rule 8 (command -> somecrement .)


state 7

    (9) command -> assign .
    SEMICOLON       reduce using rule 9 (command -> assign .)
    NEWLINE         reduce using rule 9 (command -> assign .)
    OPEN_CB         reduce using rule 9 (command -> assign .)
    DO              reduce using rule 9 (command -> assign .)
    THEN            reduce using rule 9 (command -> assign .)


state 8

    (10) command -> count_block .
    SEMICOLON       reduce using rule 10 (command -> count_block .)
    NEWLINE         reduce using rule 10 (command -> count_block .)
    OPEN_CB         reduce using rule 10 (command -> count_block .)
    DO              reduce using rule 10 (command -> count_block .)
    THEN            reduce using rule 10 (command -> count_block .)


state 9

    (11) command -> forever_block .
    SEMICOLON       reduce using rule 11 (command -> forever_block .)
    NEWLINE         reduce using rule 11 (command -> forever_block .)
    OPEN_CB         reduce using rule 11 (command -> forever_block .)
    DO              reduce using rule 11 (command -> forever_block .)
    THEN            reduce using rule 11 (command -> forever_block .)


state 10

    (12) command -> while_block .
    SEMICOLON       reduce using rule 12 (command -> while_block .)
    NEWLINE         reduce using rule 12 (command -> while_block .)
    OPEN_CB         reduce using rule 12 (command -> while_block .)
    DO              reduce using rule 12 (command -> while_block .)
    THEN            reduce using rule 12 (command -> while_block .)


state 11

    (13) command -> for_block .
    SEMICOLON       reduce using rule 13 (command -> for_block .)
    NEWLINE         reduce using rule 13 (command -> for_block .)
    OPEN_CB         reduce using rule 13 (command -> for_block .)
    DO              reduce using rule 13 (command -> for_block .)
    THEN            reduce using rule 13 (command -> for_block .)


state 12

    (14) command -> if_block .
    SEMICOLON       reduce using rule 14 (command -> if_block .)
    NEWLINE         reduce using rule 14 (command -> if_block .)
    OPEN_CB         reduce using rule 14 (command -> if_block .)
    DO              reduce using rule 14 (command -> if_block .)
    THEN            reduce using rule 14 (command -> if_block .)


state 13

    (15) command -> expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    SEMICOLON       reduce using rule 15 (command -> expr .)
    NEWLINE         reduce using rule 15 (command -> expr .)
    OPEN_CB         reduce using rule 15 (command -> expr .)
    DO              reduce using rule 15 (command -> expr .)
    THEN            reduce using rule 15 (command -> expr .)
    COLON           shift and go to state 30
    COMPARE         shift and go to state 31
    NE              shift and go to state 32
    EQ              shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    EXP             shift and go to state 38
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42
    SUB             shift and go to state 43
    ADD             shift and go to state 44


state 14

    (16) command -> empty .
    SEMICOLON       reduce using rule 16 (command -> empty .)
    NEWLINE         reduce using rule 16 (command -> empty .)
    OPEN_CB         reduce using rule 16 (command -> empty .)
    DO              reduce using rule 16 (command -> empty .)
    THEN            reduce using rule 16 (command -> empty .)


state 15

    (62) swap -> ID . SWAP ID
    (65) inplace -> ID . IP_DIV expr
    (66) inplace -> ID . IP_MUL expr
    (67) inplace -> ID . IP_SUB expr
    (68) inplace -> ID . IP_ADD expr
    (63) somecrement -> ID . DECREMENT
    (64) somecrement -> ID . INCREMENT
    (69) assign -> ID . ASSIGN expr
    (45) expr -> ID .
    SWAP            shift and go to state 45
    IP_DIV          shift and go to state 46
    IP_MUL          shift and go to state 47
    IP_SUB          shift and go to state 48
    IP_ADD          shift and go to state 49
    DECREMENT       shift and go to state 50
    INCREMENT       shift and go to state 51
    ASSIGN          shift and go to state 52
    COLON           reduce using rule 45 (expr -> ID .)
    COMPARE         reduce using rule 45 (expr -> ID .)
    NE              reduce using rule 45 (expr -> ID .)
    EQ              reduce using rule 45 (expr -> ID .)
    GE              reduce using rule 45 (expr -> ID .)
    LE              reduce using rule 45 (expr -> ID .)
    GT              reduce using rule 45 (expr -> ID .)
    LT              reduce using rule 45 (expr -> ID .)
    EXP             reduce using rule 45 (expr -> ID .)
    MOD             reduce using rule 45 (expr -> ID .)
    FLOORDIV        reduce using rule 45 (expr -> ID .)
    TRUEDIV         reduce using rule 45 (expr -> ID .)
    MUL             reduce using rule 45 (expr -> ID .)
    SUB             reduce using rule 45 (expr -> ID .)
    ADD             reduce using rule 45 (expr -> ID .)
    SEMICOLON       reduce using rule 45 (expr -> ID .)
    NEWLINE         reduce using rule 45 (expr -> ID .)
    OPEN_CB         reduce using rule 45 (expr -> ID .)
    DO              reduce using rule 45 (expr -> ID .)
    THEN            reduce using rule 45 (expr -> ID .)


state 16

    (35) count_block -> DO . OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> DO . NEWLINE statements expr TIMES
    (34) forever_block -> DO . NEWLINE statements FOREVER
    OPEN_CB         shift and go to state 53
    NEWLINE         shift and go to state 54


state 17

    (30) while_block -> WHILE . command OPEN_CB statements CLOSE_CB
    (31) while_block -> WHILE . command DO statements DONE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
  ! shift/reduce conflict for DO resolved as shift
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    OPEN_CB         reduce using rule 5 (empty -> .)

    command                        shift and go to state 55
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    expr                           shift and go to state 13
    empty                          shift and go to state 14

state 18

    (32) for_block -> FOR . ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> FOR . ID IN command DO statements DONE
    ID              shift and go to state 56


state 19

    (19) if_block -> IF . error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> IF . error THEN NEWLINE statements elifs DONE
    (21) if_block -> IF . error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> IF . error THEN NEWLINE statements DONE
    (23) if_block -> IF . expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> IF . expr THEN NEWLINE statements elifs DONE
    (25) if_block -> IF . expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> IF . expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    error           shift and go to state 57
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 58

state 20

    (37) expr -> OPEN_SQ . list_items CLOSE_SQ
    (70) list_items -> . expr
    (71) list_items -> . list_items COMMA expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    list_items                     shift and go to state 60
    expr                           shift and go to state 61

state 21

    (38) expr -> STRING .
    COLON           reduce using rule 38 (expr -> STRING .)
    COMPARE         reduce using rule 38 (expr -> STRING .)
    NE              reduce using rule 38 (expr -> STRING .)
    EQ              reduce using rule 38 (expr -> STRING .)
    GE              reduce using rule 38 (expr -> STRING .)
    LE              reduce using rule 38 (expr -> STRING .)
    GT              reduce using rule 38 (expr -> STRING .)
    LT              reduce using rule 38 (expr -> STRING .)
    EXP             reduce using rule 38 (expr -> STRING .)
    MOD             reduce using rule 38 (expr -> STRING .)
    FLOORDIV        reduce using rule 38 (expr -> STRING .)
    TRUEDIV         reduce using rule 38 (expr -> STRING .)
    MUL             reduce using rule 38 (expr -> STRING .)
    SUB             reduce using rule 38 (expr -> STRING .)
    ADD             reduce using rule 38 (expr -> STRING .)
    SEMICOLON       reduce using rule 38 (expr -> STRING .)
    NEWLINE         reduce using rule 38 (expr -> STRING .)
    OPEN_CB         reduce using rule 38 (expr -> STRING .)
    DO              reduce using rule 38 (expr -> STRING .)
    THEN            reduce using rule 38 (expr -> STRING .)
    CLOSE_SQ        reduce using rule 38 (expr -> STRING .)
    COMMA           reduce using rule 38 (expr -> STRING .)
    OPEN_SQ         reduce using rule 38 (expr -> STRING .)
    STRING          reduce using rule 38 (expr -> STRING .)
    FLOAT           reduce using rule 38 (expr -> STRING .)
    INTEGER         reduce using rule 38 (expr -> STRING .)
    ID              reduce using rule 38 (expr -> STRING .)
    NOT             reduce using rule 38 (expr -> STRING .)
    TIMES           reduce using rule 38 (expr -> STRING .)


state 22

    (39) expr -> FLOAT .
    COLON           reduce using rule 39 (expr -> FLOAT .)
    COMPARE         reduce using rule 39 (expr -> FLOAT .)
    NE              reduce using rule 39 (expr -> FLOAT .)
    EQ              reduce using rule 39 (expr -> FLOAT .)
    GE              reduce using rule 39 (expr -> FLOAT .)
    LE              reduce using rule 39 (expr -> FLOAT .)
    GT              reduce using rule 39 (expr -> FLOAT .)
    LT              reduce using rule 39 (expr -> FLOAT .)
    EXP             reduce using rule 39 (expr -> FLOAT .)
    MOD             reduce using rule 39 (expr -> FLOAT .)
    FLOORDIV        reduce using rule 39 (expr -> FLOAT .)
    TRUEDIV         reduce using rule 39 (expr -> FLOAT .)
    MUL             reduce using rule 39 (expr -> FLOAT .)
    SUB             reduce using rule 39 (expr -> FLOAT .)
    ADD             reduce using rule 39 (expr -> FLOAT .)
    SEMICOLON       reduce using rule 39 (expr -> FLOAT .)
    NEWLINE         reduce using rule 39 (expr -> FLOAT .)
    OPEN_CB         reduce using rule 39 (expr -> FLOAT .)
    DO              reduce using rule 39 (expr -> FLOAT .)
    THEN            reduce using rule 39 (expr -> FLOAT .)
    CLOSE_SQ        reduce using rule 39 (expr -> FLOAT .)
    COMMA           reduce using rule 39 (expr -> FLOAT .)
    OPEN_SQ         reduce using rule 39 (expr -> FLOAT .)
    STRING          reduce using rule 39 (expr -> FLOAT .)
    FLOAT           reduce using rule 39 (expr -> FLOAT .)
    INTEGER         reduce using rule 39 (expr -> FLOAT .)
    ID              reduce using rule 39 (expr -> FLOAT .)
    NOT             reduce using rule 39 (expr -> FLOAT .)
    TIMES           reduce using rule 39 (expr -> FLOAT .)


state 23

    (40) expr -> INTEGER .
    COLON           reduce using rule 40 (expr -> INTEGER .)
    COMPARE         reduce using rule 40 (expr -> INTEGER .)
    NE              reduce using rule 40 (expr -> INTEGER .)
    EQ              reduce using rule 40 (expr -> INTEGER .)
    GE              reduce using rule 40 (expr -> INTEGER .)
    LE              reduce using rule 40 (expr -> INTEGER .)
    GT              reduce using rule 40 (expr -> INTEGER .)
    LT              reduce using rule 40 (expr -> INTEGER .)
    EXP             reduce using rule 40 (expr -> INTEGER .)
    MOD             reduce using rule 40 (expr -> INTEGER .)
    FLOORDIV        reduce using rule 40 (expr -> INTEGER .)
    TRUEDIV         reduce using rule 40 (expr -> INTEGER .)
    MUL             reduce using rule 40 (expr -> INTEGER .)
    SUB             reduce using rule 40 (expr -> INTEGER .)
    ADD             reduce using rule 40 (expr -> INTEGER .)
    SEMICOLON       reduce using rule 40 (expr -> INTEGER .)
    NEWLINE         reduce using rule 40 (expr -> INTEGER .)
    OPEN_CB         reduce using rule 40 (expr -> INTEGER .)
    DO              reduce using rule 40 (expr -> INTEGER .)
    THEN            reduce using rule 40 (expr -> INTEGER .)
    CLOSE_SQ        reduce using rule 40 (expr -> INTEGER .)
    COMMA           reduce using rule 40 (expr -> INTEGER .)
    OPEN_SQ         reduce using rule 40 (expr -> INTEGER .)
    STRING          reduce using rule 40 (expr -> INTEGER .)
    FLOAT           reduce using rule 40 (expr -> INTEGER .)
    INTEGER         reduce using rule 40 (expr -> INTEGER .)
    ID              reduce using rule 40 (expr -> INTEGER .)
    NOT             reduce using rule 40 (expr -> INTEGER .)
    TIMES           reduce using rule 40 (expr -> INTEGER .)


state 24

    (41) expr -> COLON . ID SEMICOLON
    (42) expr -> COLON . ID args SEMICOLON
    ID              shift and go to state 62


state 25

    (46) expr -> NOT . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 63

state 26

    (47) expr -> SUB . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 64

state 27

    (2) statements -> statements statement .
    ID              reduce using rule 2 (statements -> statements statement .)
    DO              reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    FOR             reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    OPEN_SQ         reduce using rule 2 (statements -> statements statement .)
    STRING          reduce using rule 2 (statements -> statements statement .)
    FLOAT           reduce using rule 2 (statements -> statements statement .)
    INTEGER         reduce using rule 2 (statements -> statements statement .)
    COLON           reduce using rule 2 (statements -> statements statement .)
    NOT             reduce using rule 2 (statements -> statements statement .)
    SUB             reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    SEMICOLON       reduce using rule 2 (statements -> statements statement .)
    NEWLINE         reduce using rule 2 (statements -> statements statement .)
    CLOSE_CB        reduce using rule 2 (statements -> statements statement .)
    FOREVER         reduce using rule 2 (statements -> statements statement .)
    DONE            reduce using rule 2 (statements -> statements statement .)
    ELSE            reduce using rule 2 (statements -> statements statement .)


state 28

    (3) statement -> command SEMICOLON .
    ID              reduce using rule 3 (statement -> command SEMICOLON .)
    DO              reduce using rule 3 (statement -> command SEMICOLON .)
    WHILE           reduce using rule 3 (statement -> command SEMICOLON .)
    FOR             reduce using rule 3 (statement -> command SEMICOLON .)
    IF              reduce using rule 3 (statement -> command SEMICOLON .)
    OPEN_SQ         reduce using rule 3 (statement -> command SEMICOLON .)
    STRING          reduce using rule 3 (statement -> command SEMICOLON .)
    FLOAT           reduce using rule 3 (statement -> command SEMICOLON .)
    INTEGER         reduce using rule 3 (statement -> command SEMICOLON .)
    COLON           reduce using rule 3 (statement -> command SEMICOLON .)
    NOT             reduce using rule 3 (statement -> command SEMICOLON .)
    SUB             reduce using rule 3 (statement -> command SEMICOLON .)
    $end            reduce using rule 3 (statement -> command SEMICOLON .)
    SEMICOLON       reduce using rule 3 (statement -> command SEMICOLON .)
    NEWLINE         reduce using rule 3 (statement -> command SEMICOLON .)
    CLOSE_CB        reduce using rule 3 (statement -> command SEMICOLON .)
    FOREVER         reduce using rule 3 (statement -> command SEMICOLON .)
    DONE            reduce using rule 3 (statement -> command SEMICOLON .)
    ELSE            reduce using rule 3 (statement -> command SEMICOLON .)


state 29

    (4) statement -> command NEWLINE .
    ID              reduce using rule 4 (statement -> command NEWLINE .)
    DO              reduce using rule 4 (statement -> command NEWLINE .)
    WHILE           reduce using rule 4 (statement -> command NEWLINE .)
    FOR             reduce using rule 4 (statement -> command NEWLINE .)
    IF              reduce using rule 4 (statement -> command NEWLINE .)
    OPEN_SQ         reduce using rule 4 (statement -> command NEWLINE .)
    STRING          reduce using rule 4 (statement -> command NEWLINE .)
    FLOAT           reduce using rule 4 (statement -> command NEWLINE .)
    INTEGER         reduce using rule 4 (statement -> command NEWLINE .)
    COLON           reduce using rule 4 (statement -> command NEWLINE .)
    NOT             reduce using rule 4 (statement -> command NEWLINE .)
    SUB             reduce using rule 4 (statement -> command NEWLINE .)
    $end            reduce using rule 4 (statement -> command NEWLINE .)
    SEMICOLON       reduce using rule 4 (statement -> command NEWLINE .)
    NEWLINE         reduce using rule 4 (statement -> command NEWLINE .)
    CLOSE_CB        reduce using rule 4 (statement -> command NEWLINE .)
    FOREVER         reduce using rule 4 (statement -> command NEWLINE .)
    DONE            reduce using rule 4 (statement -> command NEWLINE .)
    ELSE            reduce using rule 4 (statement -> command NEWLINE .)


state 30

    (43) expr -> expr COLON . ID SEMICOLON
    (44) expr -> expr COLON . ID args SEMICOLON
    ID              shift and go to state 65


state 31

    (48) expr -> expr COMPARE . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 66

state 32

    (49) expr -> expr NE . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 67

state 33

    (50) expr -> expr EQ . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 68

state 34

    (51) expr -> expr GE . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 69

state 35

    (52) expr -> expr LE . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 70

state 36

    (53) expr -> expr GT . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 71

state 37

    (54) expr -> expr LT . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 72

state 38

    (55) expr -> expr EXP . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 73

state 39

    (56) expr -> expr MOD . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 74

state 40

    (57) expr -> expr FLOORDIV . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 75

state 41

    (58) expr -> expr TRUEDIV . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 76

state 42

    (59) expr -> expr MUL . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 77

state 43

    (60) expr -> expr SUB . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 78

state 44

    (61) expr -> expr ADD . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 79

state 45

    (62) swap -> ID SWAP . ID
    ID              shift and go to state 80


state 46

    (65) inplace -> ID IP_DIV . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 81

state 47

    (66) inplace -> ID IP_MUL . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 82

state 48

    (67) inplace -> ID IP_SUB . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 83

state 49

    (68) inplace -> ID IP_ADD . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 84

state 50

    (63) somecrement -> ID DECREMENT .
    SEMICOLON       reduce using rule 63 (somecrement -> ID DECREMENT .)
    NEWLINE         reduce using rule 63 (somecrement -> ID DECREMENT .)
    OPEN_CB         reduce using rule 63 (somecrement -> ID DECREMENT .)
    DO              reduce using rule 63 (somecrement -> ID DECREMENT .)
    THEN            reduce using rule 63 (somecrement -> ID DECREMENT .)


state 51

    (64) somecrement -> ID INCREMENT .
    SEMICOLON       reduce using rule 64 (somecrement -> ID INCREMENT .)
    NEWLINE         reduce using rule 64 (somecrement -> ID INCREMENT .)
    OPEN_CB         reduce using rule 64 (somecrement -> ID INCREMENT .)
    DO              reduce using rule 64 (somecrement -> ID INCREMENT .)
    THEN            reduce using rule 64 (somecrement -> ID INCREMENT .)


state 52

    (69) assign -> ID ASSIGN . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 85

state 53

    (35) count_block -> DO OPEN_CB . statements CLOSE_CB expr TIMES
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    statements                     shift and go to state 86
    expr                           shift and go to state 13
    statement                      shift and go to state 2
    command                        shift and go to state 3
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    empty                          shift and go to state 14

state 54

    (36) count_block -> DO NEWLINE . statements expr TIMES
    (34) forever_block -> DO NEWLINE . statements FOREVER
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    statements                     shift and go to state 87
    expr                           shift and go to state 13
    statement                      shift and go to state 2
    command                        shift and go to state 3
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    empty                          shift and go to state 14

state 55

    (30) while_block -> WHILE command . OPEN_CB statements CLOSE_CB
    (31) while_block -> WHILE command . DO statements DONE
    OPEN_CB         shift and go to state 88
    DO              shift and go to state 89


state 56

    (32) for_block -> FOR ID . IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> FOR ID . IN command DO statements DONE
    IN              shift and go to state 90


state 57

    (19) if_block -> IF error . THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> IF error . THEN NEWLINE statements elifs DONE
    (21) if_block -> IF error . THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> IF error . THEN NEWLINE statements DONE
    THEN            shift and go to state 91


state 58

    (23) if_block -> IF expr . THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> IF expr . THEN NEWLINE statements elifs DONE
    (25) if_block -> IF expr . THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> IF expr . THEN NEWLINE statements DONE
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    THEN            shift and go to state 92
    COLON           shift and go to state 30
    COMPARE         shift and go to state 31
    NE              shift and go to state 32
    EQ              shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    EXP             shift and go to state 38
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42
    SUB             shift and go to state 43
    ADD             shift and go to state 44


state 59

    (45) expr -> ID .
    THEN            reduce using rule 45 (expr -> ID .)
    COLON           reduce using rule 45 (expr -> ID .)
    COMPARE         reduce using rule 45 (expr -> ID .)
    NE              reduce using rule 45 (expr -> ID .)
    EQ              reduce using rule 45 (expr -> ID .)
    GE              reduce using rule 45 (expr -> ID .)
    LE              reduce using rule 45 (expr -> ID .)
    GT              reduce using rule 45 (expr -> ID .)
    LT              reduce using rule 45 (expr -> ID .)
    EXP             reduce using rule 45 (expr -> ID .)
    MOD             reduce using rule 45 (expr -> ID .)
    FLOORDIV        reduce using rule 45 (expr -> ID .)
    TRUEDIV         reduce using rule 45 (expr -> ID .)
    MUL             reduce using rule 45 (expr -> ID .)
    SUB             reduce using rule 45 (expr -> ID .)
    ADD             reduce using rule 45 (expr -> ID .)
    CLOSE_SQ        reduce using rule 45 (expr -> ID .)
    COMMA           reduce using rule 45 (expr -> ID .)
    SEMICOLON       reduce using rule 45 (expr -> ID .)
    NEWLINE         reduce using rule 45 (expr -> ID .)
    OPEN_CB         reduce using rule 45 (expr -> ID .)
    DO              reduce using rule 45 (expr -> ID .)
    OPEN_SQ         reduce using rule 45 (expr -> ID .)
    STRING          reduce using rule 45 (expr -> ID .)
    FLOAT           reduce using rule 45 (expr -> ID .)
    INTEGER         reduce using rule 45 (expr -> ID .)
    ID              reduce using rule 45 (expr -> ID .)
    NOT             reduce using rule 45 (expr -> ID .)
    TIMES           reduce using rule 45 (expr -> ID .)


state 60

    (37) expr -> OPEN_SQ list_items . CLOSE_SQ
    (71) list_items -> list_items . COMMA expr
    CLOSE_SQ        shift and go to state 93
    COMMA           shift and go to state 94


state 61

    (70) list_items -> expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    CLOSE_SQ        reduce using rule 70 (list_items -> expr .)
    COMMA           reduce using rule 70 (list_items -> expr .)
    COLON           shift and go to state 30
    COMPARE         shift and go to state 31
    NE              shift and go to state 32
    EQ              shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    EXP             shift and go to state 38
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42
    SUB             shift and go to state 43
    ADD             shift and go to state 44


state 62

    (41) expr -> COLON ID . SEMICOLON
    (42) expr -> COLON ID . args SEMICOLON
    (17) args -> . expr
    (18) args -> . args expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    SEMICOLON       shift and go to state 95
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    args                           shift and go to state 96
    expr                           shift and go to state 97

state 63

    (46) expr -> NOT expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for COMPARE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for FLOORDIV resolved as shift
  ! shift/reduce conflict for TRUEDIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
    SEMICOLON       reduce using rule 46 (expr -> NOT expr .)
    NEWLINE         reduce using rule 46 (expr -> NOT expr .)
    OPEN_CB         reduce using rule 46 (expr -> NOT expr .)
    DO              reduce using rule 46 (expr -> NOT expr .)
    THEN            reduce using rule 46 (expr -> NOT expr .)
    CLOSE_SQ        reduce using rule 46 (expr -> NOT expr .)
    COMMA           reduce using rule 46 (expr -> NOT expr .)
    OPEN_SQ         reduce using rule 46 (expr -> NOT expr .)
    STRING          reduce using rule 46 (expr -> NOT expr .)
    FLOAT           reduce using rule 46 (expr -> NOT expr .)
    INTEGER         reduce using rule 46 (expr -> NOT expr .)
    ID              reduce using rule 46 (expr -> NOT expr .)
    NOT             reduce using rule 46 (expr -> NOT expr .)
    TIMES           reduce using rule 46 (expr -> NOT expr .)
    COLON           shift and go to state 30
    COMPARE         shift and go to state 31
    NE              shift and go to state 32
    EQ              shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    EXP             shift and go to state 38
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42
    SUB             shift and go to state 43
    ADD             shift and go to state 44


state 64

    (47) expr -> SUB expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    COLON           reduce using rule 47 (expr -> SUB expr .)
    COMPARE         reduce using rule 47 (expr -> SUB expr .)
    NE              reduce using rule 47 (expr -> SUB expr .)
    EQ              reduce using rule 47 (expr -> SUB expr .)
    GE              reduce using rule 47 (expr -> SUB expr .)
    LE              reduce using rule 47 (expr -> SUB expr .)
    GT              reduce using rule 47 (expr -> SUB expr .)
    LT              reduce using rule 47 (expr -> SUB expr .)
    EXP             reduce using rule 47 (expr -> SUB expr .)
    MOD             reduce using rule 47 (expr -> SUB expr .)
    FLOORDIV        reduce using rule 47 (expr -> SUB expr .)
    TRUEDIV         reduce using rule 47 (expr -> SUB expr .)
    MUL             reduce using rule 47 (expr -> SUB expr .)
    SUB             reduce using rule 47 (expr -> SUB expr .)
    ADD             reduce using rule 47 (expr -> SUB expr .)
    SEMICOLON       reduce using rule 47 (expr -> SUB expr .)
    NEWLINE         reduce using rule 47 (expr -> SUB expr .)
    OPEN_CB         reduce using rule 47 (expr -> SUB expr .)
    DO              reduce using rule 47 (expr -> SUB expr .)
    THEN            reduce using rule 47 (expr -> SUB expr .)
    CLOSE_SQ        reduce using rule 47 (expr -> SUB expr .)
    COMMA           reduce using rule 47 (expr -> SUB expr .)
    OPEN_SQ         reduce using rule 47 (expr -> SUB expr .)
    STRING          reduce using rule 47 (expr -> SUB expr .)
    FLOAT           reduce using rule 47 (expr -> SUB expr .)
    INTEGER         reduce using rule 47 (expr -> SUB expr .)
    ID              reduce using rule 47 (expr -> SUB expr .)
    NOT             reduce using rule 47 (expr -> SUB expr .)
    TIMES           reduce using rule 47 (expr -> SUB expr .)


state 65

    (43) expr -> expr COLON ID . SEMICOLON
    (44) expr -> expr COLON ID . args SEMICOLON
    (17) args -> . expr
    (18) args -> . args expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    SEMICOLON       shift and go to state 98
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 97
    args                           shift and go to state 99

state 66

    (48) expr -> expr COMPARE expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    COLON           reduce using rule 48 (expr -> expr COMPARE expr .)
    COMPARE         reduce using rule 48 (expr -> expr COMPARE expr .)
    NE              reduce using rule 48 (expr -> expr COMPARE expr .)
    EQ              reduce using rule 48 (expr -> expr COMPARE expr .)
    GE              reduce using rule 48 (expr -> expr COMPARE expr .)
    LE              reduce using rule 48 (expr -> expr COMPARE expr .)
    GT              reduce using rule 48 (expr -> expr COMPARE expr .)
    LT              reduce using rule 48 (expr -> expr COMPARE expr .)
    EXP             reduce using rule 48 (expr -> expr COMPARE expr .)
    MOD             reduce using rule 48 (expr -> expr COMPARE expr .)
    FLOORDIV        reduce using rule 48 (expr -> expr COMPARE expr .)
    TRUEDIV         reduce using rule 48 (expr -> expr COMPARE expr .)
    MUL             reduce using rule 48 (expr -> expr COMPARE expr .)
    SUB             reduce using rule 48 (expr -> expr COMPARE expr .)
    ADD             reduce using rule 48 (expr -> expr COMPARE expr .)
    SEMICOLON       reduce using rule 48 (expr -> expr COMPARE expr .)
    NEWLINE         reduce using rule 48 (expr -> expr COMPARE expr .)
    OPEN_CB         reduce using rule 48 (expr -> expr COMPARE expr .)
    DO              reduce using rule 48 (expr -> expr COMPARE expr .)
    THEN            reduce using rule 48 (expr -> expr COMPARE expr .)
    CLOSE_SQ        reduce using rule 48 (expr -> expr COMPARE expr .)
    COMMA           reduce using rule 48 (expr -> expr COMPARE expr .)
    OPEN_SQ         reduce using rule 48 (expr -> expr COMPARE expr .)
    STRING          reduce using rule 48 (expr -> expr COMPARE expr .)
    FLOAT           reduce using rule 48 (expr -> expr COMPARE expr .)
    INTEGER         reduce using rule 48 (expr -> expr COMPARE expr .)
    ID              reduce using rule 48 (expr -> expr COMPARE expr .)
    NOT             reduce using rule 48 (expr -> expr COMPARE expr .)
    TIMES           reduce using rule 48 (expr -> expr COMPARE expr .)


state 67

    (49) expr -> expr NE expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    COLON           reduce using rule 49 (expr -> expr NE expr .)
    NE              reduce using rule 49 (expr -> expr NE expr .)
    EQ              reduce using rule 49 (expr -> expr NE expr .)
    GE              reduce using rule 49 (expr -> expr NE expr .)
    LE              reduce using rule 49 (expr -> expr NE expr .)
    GT              reduce using rule 49 (expr -> expr NE expr .)
    LT              reduce using rule 49 (expr -> expr NE expr .)
    EXP             reduce using rule 49 (expr -> expr NE expr .)
    SEMICOLON       reduce using rule 49 (expr -> expr NE expr .)
    NEWLINE         reduce using rule 49 (expr -> expr NE expr .)
    OPEN_CB         reduce using rule 49 (expr -> expr NE expr .)
    DO              reduce using rule 49 (expr -> expr NE expr .)
    THEN            reduce using rule 49 (expr -> expr NE expr .)
    CLOSE_SQ        reduce using rule 49 (expr -> expr NE expr .)
    COMMA           reduce using rule 49 (expr -> expr NE expr .)
    OPEN_SQ         reduce using rule 49 (expr -> expr NE expr .)
    STRING          reduce using rule 49 (expr -> expr NE expr .)
    FLOAT           reduce using rule 49 (expr -> expr NE expr .)
    INTEGER         reduce using rule 49 (expr -> expr NE expr .)
    ID              reduce using rule 49 (expr -> expr NE expr .)
    NOT             reduce using rule 49 (expr -> expr NE expr .)
    TIMES           reduce using rule 49 (expr -> expr NE expr .)
    COMPARE         shift and go to state 31
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42
    SUB             shift and go to state 43
    ADD             shift and go to state 44


state 68

    (50) expr -> expr EQ expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    COLON           reduce using rule 50 (expr -> expr EQ expr .)
    NE              reduce using rule 50 (expr -> expr EQ expr .)
    EQ              reduce using rule 50 (expr -> expr EQ expr .)
    GE              reduce using rule 50 (expr -> expr EQ expr .)
    LE              reduce using rule 50 (expr -> expr EQ expr .)
    GT              reduce using rule 50 (expr -> expr EQ expr .)
    LT              reduce using rule 50 (expr -> expr EQ expr .)
    EXP             reduce using rule 50 (expr -> expr EQ expr .)
    SEMICOLON       reduce using rule 50 (expr -> expr EQ expr .)
    NEWLINE         reduce using rule 50 (expr -> expr EQ expr .)
    OPEN_CB         reduce using rule 50 (expr -> expr EQ expr .)
    DO              reduce using rule 50 (expr -> expr EQ expr .)
    THEN            reduce using rule 50 (expr -> expr EQ expr .)
    CLOSE_SQ        reduce using rule 50 (expr -> expr EQ expr .)
    COMMA           reduce using rule 50 (expr -> expr EQ expr .)
    OPEN_SQ         reduce using rule 50 (expr -> expr EQ expr .)
    STRING          reduce using rule 50 (expr -> expr EQ expr .)
    FLOAT           reduce using rule 50 (expr -> expr EQ expr .)
    INTEGER         reduce using rule 50 (expr -> expr EQ expr .)
    ID              reduce using rule 50 (expr -> expr EQ expr .)
    NOT             reduce using rule 50 (expr -> expr EQ expr .)
    TIMES           reduce using rule 50 (expr -> expr EQ expr .)
    COMPARE         shift and go to state 31
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42
    SUB             shift and go to state 43
    ADD             shift and go to state 44


state 69

    (51) expr -> expr GE expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    COLON           reduce using rule 51 (expr -> expr GE expr .)
    NE              reduce using rule 51 (expr -> expr GE expr .)
    EQ              reduce using rule 51 (expr -> expr GE expr .)
    GE              reduce using rule 51 (expr -> expr GE expr .)
    LE              reduce using rule 51 (expr -> expr GE expr .)
    GT              reduce using rule 51 (expr -> expr GE expr .)
    LT              reduce using rule 51 (expr -> expr GE expr .)
    EXP             reduce using rule 51 (expr -> expr GE expr .)
    SEMICOLON       reduce using rule 51 (expr -> expr GE expr .)
    NEWLINE         reduce using rule 51 (expr -> expr GE expr .)
    OPEN_CB         reduce using rule 51 (expr -> expr GE expr .)
    DO              reduce using rule 51 (expr -> expr GE expr .)
    THEN            reduce using rule 51 (expr -> expr GE expr .)
    CLOSE_SQ        reduce using rule 51 (expr -> expr GE expr .)
    COMMA           reduce using rule 51 (expr -> expr GE expr .)
    OPEN_SQ         reduce using rule 51 (expr -> expr GE expr .)
    STRING          reduce using rule 51 (expr -> expr GE expr .)
    FLOAT           reduce using rule 51 (expr -> expr GE expr .)
    INTEGER         reduce using rule 51 (expr -> expr GE expr .)
    ID              reduce using rule 51 (expr -> expr GE expr .)
    NOT             reduce using rule 51 (expr -> expr GE expr .)
    TIMES           reduce using rule 51 (expr -> expr GE expr .)
    COMPARE         shift and go to state 31
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42
    SUB             shift and go to state 43
    ADD             shift and go to state 44


state 70

    (52) expr -> expr LE expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    COLON           reduce using rule 52 (expr -> expr LE expr .)
    NE              reduce using rule 52 (expr -> expr LE expr .)
    EQ              reduce using rule 52 (expr -> expr LE expr .)
    GE              reduce using rule 52 (expr -> expr LE expr .)
    LE              reduce using rule 52 (expr -> expr LE expr .)
    GT              reduce using rule 52 (expr -> expr LE expr .)
    LT              reduce using rule 52 (expr -> expr LE expr .)
    EXP             reduce using rule 52 (expr -> expr LE expr .)
    SEMICOLON       reduce using rule 52 (expr -> expr LE expr .)
    NEWLINE         reduce using rule 52 (expr -> expr LE expr .)
    OPEN_CB         reduce using rule 52 (expr -> expr LE expr .)
    DO              reduce using rule 52 (expr -> expr LE expr .)
    THEN            reduce using rule 52 (expr -> expr LE expr .)
    CLOSE_SQ        reduce using rule 52 (expr -> expr LE expr .)
    COMMA           reduce using rule 52 (expr -> expr LE expr .)
    OPEN_SQ         reduce using rule 52 (expr -> expr LE expr .)
    STRING          reduce using rule 52 (expr -> expr LE expr .)
    FLOAT           reduce using rule 52 (expr -> expr LE expr .)
    INTEGER         reduce using rule 52 (expr -> expr LE expr .)
    ID              reduce using rule 52 (expr -> expr LE expr .)
    NOT             reduce using rule 52 (expr -> expr LE expr .)
    TIMES           reduce using rule 52 (expr -> expr LE expr .)
    COMPARE         shift and go to state 31
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42
    SUB             shift and go to state 43
    ADD             shift and go to state 44


state 71

    (53) expr -> expr GT expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    COLON           reduce using rule 53 (expr -> expr GT expr .)
    NE              reduce using rule 53 (expr -> expr GT expr .)
    EQ              reduce using rule 53 (expr -> expr GT expr .)
    GE              reduce using rule 53 (expr -> expr GT expr .)
    LE              reduce using rule 53 (expr -> expr GT expr .)
    GT              reduce using rule 53 (expr -> expr GT expr .)
    LT              reduce using rule 53 (expr -> expr GT expr .)
    EXP             reduce using rule 53 (expr -> expr GT expr .)
    SEMICOLON       reduce using rule 53 (expr -> expr GT expr .)
    NEWLINE         reduce using rule 53 (expr -> expr GT expr .)
    OPEN_CB         reduce using rule 53 (expr -> expr GT expr .)
    DO              reduce using rule 53 (expr -> expr GT expr .)
    THEN            reduce using rule 53 (expr -> expr GT expr .)
    CLOSE_SQ        reduce using rule 53 (expr -> expr GT expr .)
    COMMA           reduce using rule 53 (expr -> expr GT expr .)
    OPEN_SQ         reduce using rule 53 (expr -> expr GT expr .)
    STRING          reduce using rule 53 (expr -> expr GT expr .)
    FLOAT           reduce using rule 53 (expr -> expr GT expr .)
    INTEGER         reduce using rule 53 (expr -> expr GT expr .)
    ID              reduce using rule 53 (expr -> expr GT expr .)
    NOT             reduce using rule 53 (expr -> expr GT expr .)
    TIMES           reduce using rule 53 (expr -> expr GT expr .)
    COMPARE         shift and go to state 31
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42
    SUB             shift and go to state 43
    ADD             shift and go to state 44


state 72

    (54) expr -> expr LT expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    COLON           reduce using rule 54 (expr -> expr LT expr .)
    NE              reduce using rule 54 (expr -> expr LT expr .)
    EQ              reduce using rule 54 (expr -> expr LT expr .)
    GE              reduce using rule 54 (expr -> expr LT expr .)
    LE              reduce using rule 54 (expr -> expr LT expr .)
    GT              reduce using rule 54 (expr -> expr LT expr .)
    LT              reduce using rule 54 (expr -> expr LT expr .)
    EXP             reduce using rule 54 (expr -> expr LT expr .)
    SEMICOLON       reduce using rule 54 (expr -> expr LT expr .)
    NEWLINE         reduce using rule 54 (expr -> expr LT expr .)
    OPEN_CB         reduce using rule 54 (expr -> expr LT expr .)
    DO              reduce using rule 54 (expr -> expr LT expr .)
    THEN            reduce using rule 54 (expr -> expr LT expr .)
    CLOSE_SQ        reduce using rule 54 (expr -> expr LT expr .)
    COMMA           reduce using rule 54 (expr -> expr LT expr .)
    OPEN_SQ         reduce using rule 54 (expr -> expr LT expr .)
    STRING          reduce using rule 54 (expr -> expr LT expr .)
    FLOAT           reduce using rule 54 (expr -> expr LT expr .)
    INTEGER         reduce using rule 54 (expr -> expr LT expr .)
    ID              reduce using rule 54 (expr -> expr LT expr .)
    NOT             reduce using rule 54 (expr -> expr LT expr .)
    TIMES           reduce using rule 54 (expr -> expr LT expr .)
    COMPARE         shift and go to state 31
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42
    SUB             shift and go to state 43
    ADD             shift and go to state 44


state 73

    (55) expr -> expr EXP expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for COMPARE resolved as shift
  ! shift/reduce conflict for NE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for FLOORDIV resolved as shift
  ! shift/reduce conflict for TRUEDIV resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
  ! shift/reduce conflict for ADD resolved as shift
    SEMICOLON       reduce using rule 55 (expr -> expr EXP expr .)
    NEWLINE         reduce using rule 55 (expr -> expr EXP expr .)
    OPEN_CB         reduce using rule 55 (expr -> expr EXP expr .)
    DO              reduce using rule 55 (expr -> expr EXP expr .)
    THEN            reduce using rule 55 (expr -> expr EXP expr .)
    CLOSE_SQ        reduce using rule 55 (expr -> expr EXP expr .)
    COMMA           reduce using rule 55 (expr -> expr EXP expr .)
    OPEN_SQ         reduce using rule 55 (expr -> expr EXP expr .)
    STRING          reduce using rule 55 (expr -> expr EXP expr .)
    FLOAT           reduce using rule 55 (expr -> expr EXP expr .)
    INTEGER         reduce using rule 55 (expr -> expr EXP expr .)
    ID              reduce using rule 55 (expr -> expr EXP expr .)
    NOT             reduce using rule 55 (expr -> expr EXP expr .)
    TIMES           reduce using rule 55 (expr -> expr EXP expr .)
    COLON           shift and go to state 30
    COMPARE         shift and go to state 31
    NE              shift and go to state 32
    EQ              shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    EXP             shift and go to state 38
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42
    SUB             shift and go to state 43
    ADD             shift and go to state 44


state 74

    (56) expr -> expr MOD expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    COLON           reduce using rule 56 (expr -> expr MOD expr .)
    NE              reduce using rule 56 (expr -> expr MOD expr .)
    EQ              reduce using rule 56 (expr -> expr MOD expr .)
    GE              reduce using rule 56 (expr -> expr MOD expr .)
    LE              reduce using rule 56 (expr -> expr MOD expr .)
    GT              reduce using rule 56 (expr -> expr MOD expr .)
    LT              reduce using rule 56 (expr -> expr MOD expr .)
    EXP             reduce using rule 56 (expr -> expr MOD expr .)
    MOD             reduce using rule 56 (expr -> expr MOD expr .)
    FLOORDIV        reduce using rule 56 (expr -> expr MOD expr .)
    TRUEDIV         reduce using rule 56 (expr -> expr MOD expr .)
    MUL             reduce using rule 56 (expr -> expr MOD expr .)
    SUB             reduce using rule 56 (expr -> expr MOD expr .)
    ADD             reduce using rule 56 (expr -> expr MOD expr .)
    SEMICOLON       reduce using rule 56 (expr -> expr MOD expr .)
    NEWLINE         reduce using rule 56 (expr -> expr MOD expr .)
    OPEN_CB         reduce using rule 56 (expr -> expr MOD expr .)
    DO              reduce using rule 56 (expr -> expr MOD expr .)
    THEN            reduce using rule 56 (expr -> expr MOD expr .)
    CLOSE_SQ        reduce using rule 56 (expr -> expr MOD expr .)
    COMMA           reduce using rule 56 (expr -> expr MOD expr .)
    OPEN_SQ         reduce using rule 56 (expr -> expr MOD expr .)
    STRING          reduce using rule 56 (expr -> expr MOD expr .)
    FLOAT           reduce using rule 56 (expr -> expr MOD expr .)
    INTEGER         reduce using rule 56 (expr -> expr MOD expr .)
    ID              reduce using rule 56 (expr -> expr MOD expr .)
    NOT             reduce using rule 56 (expr -> expr MOD expr .)
    TIMES           reduce using rule 56 (expr -> expr MOD expr .)
    COMPARE         shift and go to state 31


state 75

    (57) expr -> expr FLOORDIV expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    COLON           reduce using rule 57 (expr -> expr FLOORDIV expr .)
    NE              reduce using rule 57 (expr -> expr FLOORDIV expr .)
    EQ              reduce using rule 57 (expr -> expr FLOORDIV expr .)
    GE              reduce using rule 57 (expr -> expr FLOORDIV expr .)
    LE              reduce using rule 57 (expr -> expr FLOORDIV expr .)
    GT              reduce using rule 57 (expr -> expr FLOORDIV expr .)
    LT              reduce using rule 57 (expr -> expr FLOORDIV expr .)
    EXP             reduce using rule 57 (expr -> expr FLOORDIV expr .)
    MOD             reduce using rule 57 (expr -> expr FLOORDIV expr .)
    FLOORDIV        reduce using rule 57 (expr -> expr FLOORDIV expr .)
    TRUEDIV         reduce using rule 57 (expr -> expr FLOORDIV expr .)
    MUL             reduce using rule 57 (expr -> expr FLOORDIV expr .)
    SUB             reduce using rule 57 (expr -> expr FLOORDIV expr .)
    ADD             reduce using rule 57 (expr -> expr FLOORDIV expr .)
    SEMICOLON       reduce using rule 57 (expr -> expr FLOORDIV expr .)
    NEWLINE         reduce using rule 57 (expr -> expr FLOORDIV expr .)
    OPEN_CB         reduce using rule 57 (expr -> expr FLOORDIV expr .)
    DO              reduce using rule 57 (expr -> expr FLOORDIV expr .)
    THEN            reduce using rule 57 (expr -> expr FLOORDIV expr .)
    CLOSE_SQ        reduce using rule 57 (expr -> expr FLOORDIV expr .)
    COMMA           reduce using rule 57 (expr -> expr FLOORDIV expr .)
    OPEN_SQ         reduce using rule 57 (expr -> expr FLOORDIV expr .)
    STRING          reduce using rule 57 (expr -> expr FLOORDIV expr .)
    FLOAT           reduce using rule 57 (expr -> expr FLOORDIV expr .)
    INTEGER         reduce using rule 57 (expr -> expr FLOORDIV expr .)
    ID              reduce using rule 57 (expr -> expr FLOORDIV expr .)
    NOT             reduce using rule 57 (expr -> expr FLOORDIV expr .)
    TIMES           reduce using rule 57 (expr -> expr FLOORDIV expr .)
    COMPARE         shift and go to state 31


state 76

    (58) expr -> expr TRUEDIV expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    COLON           reduce using rule 58 (expr -> expr TRUEDIV expr .)
    NE              reduce using rule 58 (expr -> expr TRUEDIV expr .)
    EQ              reduce using rule 58 (expr -> expr TRUEDIV expr .)
    GE              reduce using rule 58 (expr -> expr TRUEDIV expr .)
    LE              reduce using rule 58 (expr -> expr TRUEDIV expr .)
    GT              reduce using rule 58 (expr -> expr TRUEDIV expr .)
    LT              reduce using rule 58 (expr -> expr TRUEDIV expr .)
    EXP             reduce using rule 58 (expr -> expr TRUEDIV expr .)
    MOD             reduce using rule 58 (expr -> expr TRUEDIV expr .)
    FLOORDIV        reduce using rule 58 (expr -> expr TRUEDIV expr .)
    TRUEDIV         reduce using rule 58 (expr -> expr TRUEDIV expr .)
    MUL             reduce using rule 58 (expr -> expr TRUEDIV expr .)
    SUB             reduce using rule 58 (expr -> expr TRUEDIV expr .)
    ADD             reduce using rule 58 (expr -> expr TRUEDIV expr .)
    SEMICOLON       reduce using rule 58 (expr -> expr TRUEDIV expr .)
    NEWLINE         reduce using rule 58 (expr -> expr TRUEDIV expr .)
    OPEN_CB         reduce using rule 58 (expr -> expr TRUEDIV expr .)
    DO              reduce using rule 58 (expr -> expr TRUEDIV expr .)
    THEN            reduce using rule 58 (expr -> expr TRUEDIV expr .)
    CLOSE_SQ        reduce using rule 58 (expr -> expr TRUEDIV expr .)
    COMMA           reduce using rule 58 (expr -> expr TRUEDIV expr .)
    OPEN_SQ         reduce using rule 58 (expr -> expr TRUEDIV expr .)
    STRING          reduce using rule 58 (expr -> expr TRUEDIV expr .)
    FLOAT           reduce using rule 58 (expr -> expr TRUEDIV expr .)
    INTEGER         reduce using rule 58 (expr -> expr TRUEDIV expr .)
    ID              reduce using rule 58 (expr -> expr TRUEDIV expr .)
    NOT             reduce using rule 58 (expr -> expr TRUEDIV expr .)
    TIMES           reduce using rule 58 (expr -> expr TRUEDIV expr .)
    COMPARE         shift and go to state 31


state 77

    (59) expr -> expr MUL expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    COLON           reduce using rule 59 (expr -> expr MUL expr .)
    NE              reduce using rule 59 (expr -> expr MUL expr .)
    EQ              reduce using rule 59 (expr -> expr MUL expr .)
    GE              reduce using rule 59 (expr -> expr MUL expr .)
    LE              reduce using rule 59 (expr -> expr MUL expr .)
    GT              reduce using rule 59 (expr -> expr MUL expr .)
    LT              reduce using rule 59 (expr -> expr MUL expr .)
    EXP             reduce using rule 59 (expr -> expr MUL expr .)
    MOD             reduce using rule 59 (expr -> expr MUL expr .)
    FLOORDIV        reduce using rule 59 (expr -> expr MUL expr .)
    TRUEDIV         reduce using rule 59 (expr -> expr MUL expr .)
    MUL             reduce using rule 59 (expr -> expr MUL expr .)
    SUB             reduce using rule 59 (expr -> expr MUL expr .)
    ADD             reduce using rule 59 (expr -> expr MUL expr .)
    SEMICOLON       reduce using rule 59 (expr -> expr MUL expr .)
    NEWLINE         reduce using rule 59 (expr -> expr MUL expr .)
    OPEN_CB         reduce using rule 59 (expr -> expr MUL expr .)
    DO              reduce using rule 59 (expr -> expr MUL expr .)
    THEN            reduce using rule 59 (expr -> expr MUL expr .)
    CLOSE_SQ        reduce using rule 59 (expr -> expr MUL expr .)
    COMMA           reduce using rule 59 (expr -> expr MUL expr .)
    OPEN_SQ         reduce using rule 59 (expr -> expr MUL expr .)
    STRING          reduce using rule 59 (expr -> expr MUL expr .)
    FLOAT           reduce using rule 59 (expr -> expr MUL expr .)
    INTEGER         reduce using rule 59 (expr -> expr MUL expr .)
    ID              reduce using rule 59 (expr -> expr MUL expr .)
    NOT             reduce using rule 59 (expr -> expr MUL expr .)
    TIMES           reduce using rule 59 (expr -> expr MUL expr .)
    COMPARE         shift and go to state 31


state 78

    (60) expr -> expr SUB expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    COLON           reduce using rule 60 (expr -> expr SUB expr .)
    NE              reduce using rule 60 (expr -> expr SUB expr .)
    EQ              reduce using rule 60 (expr -> expr SUB expr .)
    GE              reduce using rule 60 (expr -> expr SUB expr .)
    LE              reduce using rule 60 (expr -> expr SUB expr .)
    GT              reduce using rule 60 (expr -> expr SUB expr .)
    LT              reduce using rule 60 (expr -> expr SUB expr .)
    EXP             reduce using rule 60 (expr -> expr SUB expr .)
    SUB             reduce using rule 60 (expr -> expr SUB expr .)
    ADD             reduce using rule 60 (expr -> expr SUB expr .)
    SEMICOLON       reduce using rule 60 (expr -> expr SUB expr .)
    NEWLINE         reduce using rule 60 (expr -> expr SUB expr .)
    OPEN_CB         reduce using rule 60 (expr -> expr SUB expr .)
    DO              reduce using rule 60 (expr -> expr SUB expr .)
    THEN            reduce using rule 60 (expr -> expr SUB expr .)
    CLOSE_SQ        reduce using rule 60 (expr -> expr SUB expr .)
    COMMA           reduce using rule 60 (expr -> expr SUB expr .)
    OPEN_SQ         reduce using rule 60 (expr -> expr SUB expr .)
    STRING          reduce using rule 60 (expr -> expr SUB expr .)
    FLOAT           reduce using rule 60 (expr -> expr SUB expr .)
    INTEGER         reduce using rule 60 (expr -> expr SUB expr .)
    ID              reduce using rule 60 (expr -> expr SUB expr .)
    NOT             reduce using rule 60 (expr -> expr SUB expr .)
    TIMES           reduce using rule 60 (expr -> expr SUB expr .)
    COMPARE         shift and go to state 31
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42


state 79

    (61) expr -> expr ADD expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    COLON           reduce using rule 61 (expr -> expr ADD expr .)
    NE              reduce using rule 61 (expr -> expr ADD expr .)
    EQ              reduce using rule 61 (expr -> expr ADD expr .)
    GE              reduce using rule 61 (expr -> expr ADD expr .)
    LE              reduce using rule 61 (expr -> expr ADD expr .)
    GT              reduce using rule 61 (expr -> expr ADD expr .)
    LT              reduce using rule 61 (expr -> expr ADD expr .)
    EXP             reduce using rule 61 (expr -> expr ADD expr .)
    SUB             reduce using rule 61 (expr -> expr ADD expr .)
    ADD             reduce using rule 61 (expr -> expr ADD expr .)
    SEMICOLON       reduce using rule 61 (expr -> expr ADD expr .)
    NEWLINE         reduce using rule 61 (expr -> expr ADD expr .)
    OPEN_CB         reduce using rule 61 (expr -> expr ADD expr .)
    DO              reduce using rule 61 (expr -> expr ADD expr .)
    THEN            reduce using rule 61 (expr -> expr ADD expr .)
    CLOSE_SQ        reduce using rule 61 (expr -> expr ADD expr .)
    COMMA           reduce using rule 61 (expr -> expr ADD expr .)
    OPEN_SQ         reduce using rule 61 (expr -> expr ADD expr .)
    STRING          reduce using rule 61 (expr -> expr ADD expr .)
    FLOAT           reduce using rule 61 (expr -> expr ADD expr .)
    INTEGER         reduce using rule 61 (expr -> expr ADD expr .)
    ID              reduce using rule 61 (expr -> expr ADD expr .)
    NOT             reduce using rule 61 (expr -> expr ADD expr .)
    TIMES           reduce using rule 61 (expr -> expr ADD expr .)
    COMPARE         shift and go to state 31
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42


state 80

    (62) swap -> ID SWAP ID .
    SEMICOLON       reduce using rule 62 (swap -> ID SWAP ID .)
    NEWLINE         reduce using rule 62 (swap -> ID SWAP ID .)
    OPEN_CB         reduce using rule 62 (swap -> ID SWAP ID .)
    DO              reduce using rule 62 (swap -> ID SWAP ID .)
    THEN            reduce using rule 62 (swap -> ID SWAP ID .)


state 81

    (65) inplace -> ID IP_DIV expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    SEMICOLON       reduce using rule 65 (inplace -> ID IP_DIV expr .)
    NEWLINE         reduce using rule 65 (inplace -> ID IP_DIV expr .)
    OPEN_CB         reduce using rule 65 (inplace -> ID IP_DIV expr .)
    DO              reduce using rule 65 (inplace -> ID IP_DIV expr .)
    THEN            reduce using rule 65 (inplace -> ID IP_DIV expr .)
    COLON           shift and go to state 30
    COMPARE         shift and go to state 31
    NE              shift and go to state 32
    EQ              shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    EXP             shift and go to state 38
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42
    SUB             shift and go to state 43
    ADD             shift and go to state 44


state 82

    (66) inplace -> ID IP_MUL expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    SEMICOLON       reduce using rule 66 (inplace -> ID IP_MUL expr .)
    NEWLINE         reduce using rule 66 (inplace -> ID IP_MUL expr .)
    OPEN_CB         reduce using rule 66 (inplace -> ID IP_MUL expr .)
    DO              reduce using rule 66 (inplace -> ID IP_MUL expr .)
    THEN            reduce using rule 66 (inplace -> ID IP_MUL expr .)
    COLON           shift and go to state 30
    COMPARE         shift and go to state 31
    NE              shift and go to state 32
    EQ              shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    EXP             shift and go to state 38
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42
    SUB             shift and go to state 43
    ADD             shift and go to state 44


state 83

    (67) inplace -> ID IP_SUB expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    SEMICOLON       reduce using rule 67 (inplace -> ID IP_SUB expr .)
    NEWLINE         reduce using rule 67 (inplace -> ID IP_SUB expr .)
    OPEN_CB         reduce using rule 67 (inplace -> ID IP_SUB expr .)
    DO              reduce using rule 67 (inplace -> ID IP_SUB expr .)
    THEN            reduce using rule 67 (inplace -> ID IP_SUB expr .)
    COLON           shift and go to state 30
    COMPARE         shift and go to state 31
    NE              shift and go to state 32
    EQ              shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    EXP             shift and go to state 38
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42
    SUB             shift and go to state 43
    ADD             shift and go to state 44


state 84

    (68) inplace -> ID IP_ADD expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    SEMICOLON       reduce using rule 68 (inplace -> ID IP_ADD expr .)
    NEWLINE         reduce using rule 68 (inplace -> ID IP_ADD expr .)
    OPEN_CB         reduce using rule 68 (inplace -> ID IP_ADD expr .)
    DO              reduce using rule 68 (inplace -> ID IP_ADD expr .)
    THEN            reduce using rule 68 (inplace -> ID IP_ADD expr .)
    COLON           shift and go to state 30
    COMPARE         shift and go to state 31
    NE              shift and go to state 32
    EQ              shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    EXP             shift and go to state 38
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42
    SUB             shift and go to state 43
    ADD             shift and go to state 44


state 85

    (69) assign -> ID ASSIGN expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    SEMICOLON       reduce using rule 69 (assign -> ID ASSIGN expr .)
    NEWLINE         reduce using rule 69 (assign -> ID ASSIGN expr .)
    OPEN_CB         reduce using rule 69 (assign -> ID ASSIGN expr .)
    DO              reduce using rule 69 (assign -> ID ASSIGN expr .)
    THEN            reduce using rule 69 (assign -> ID ASSIGN expr .)
    COLON           shift and go to state 30
    COMPARE         shift and go to state 31
    NE              shift and go to state 32
    EQ              shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    EXP             shift and go to state 38
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42
    SUB             shift and go to state 43
    ADD             shift and go to state 44


state 86

    (35) count_block -> DO OPEN_CB statements . CLOSE_CB expr TIMES
    (2) statements -> statements . statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    CLOSE_CB        shift and go to state 100
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    expr                           shift and go to state 13
    statement                      shift and go to state 27
    command                        shift and go to state 3
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    empty                          shift and go to state 14

state 87

    (36) count_block -> DO NEWLINE statements . expr TIMES
    (34) forever_block -> DO NEWLINE statements . FOREVER
    (2) statements -> statements . statement
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (5) empty -> .
    FOREVER         shift and go to state 102
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 103
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    expr                           shift and go to state 101
    statement                      shift and go to state 27
    command                        shift and go to state 3
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    empty                          shift and go to state 14

state 88

    (30) while_block -> WHILE command OPEN_CB . statements CLOSE_CB
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    command                        shift and go to state 3
    statements                     shift and go to state 104
    statement                      shift and go to state 2
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    expr                           shift and go to state 13
    empty                          shift and go to state 14

state 89

    (31) while_block -> WHILE command DO . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    command                        shift and go to state 3
    statements                     shift and go to state 105
    statement                      shift and go to state 2
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    expr                           shift and go to state 13
    empty                          shift and go to state 14

state 90

    (32) for_block -> FOR ID IN . command OPEN_CB statements CLOSE_CB
    (33) for_block -> FOR ID IN . command DO statements DONE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
  ! shift/reduce conflict for DO resolved as shift
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    OPEN_CB         reduce using rule 5 (empty -> .)

    command                        shift and go to state 106
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    expr                           shift and go to state 13
    empty                          shift and go to state 14

state 91

    (19) if_block -> IF error THEN . NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> IF error THEN . NEWLINE statements elifs DONE
    (21) if_block -> IF error THEN . NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> IF error THEN . NEWLINE statements DONE
    NEWLINE         shift and go to state 107


state 92

    (23) if_block -> IF expr THEN . NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> IF expr THEN . NEWLINE statements elifs DONE
    (25) if_block -> IF expr THEN . NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> IF expr THEN . NEWLINE statements DONE
    NEWLINE         shift and go to state 108


state 93

    (37) expr -> OPEN_SQ list_items CLOSE_SQ .
    COLON           reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    COMPARE         reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    NE              reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    EQ              reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    GE              reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    LE              reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    GT              reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    LT              reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    EXP             reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    MOD             reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    FLOORDIV        reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    TRUEDIV         reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    MUL             reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    SUB             reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    ADD             reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    SEMICOLON       reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    NEWLINE         reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    OPEN_CB         reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    DO              reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    THEN            reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    CLOSE_SQ        reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    COMMA           reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    OPEN_SQ         reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    STRING          reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    FLOAT           reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    INTEGER         reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    ID              reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    NOT             reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)
    TIMES           reduce using rule 37 (expr -> OPEN_SQ list_items CLOSE_SQ .)


state 94

    (71) list_items -> list_items COMMA . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 109

state 95

    (41) expr -> COLON ID SEMICOLON .
    COLON           reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    COMPARE         reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    NE              reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    EQ              reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    GE              reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    LE              reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    GT              reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    LT              reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    EXP             reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    MOD             reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    FLOORDIV        reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    TRUEDIV         reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    MUL             reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    SUB             reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    ADD             reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    SEMICOLON       reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    NEWLINE         reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    OPEN_CB         reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    DO              reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    THEN            reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    CLOSE_SQ        reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    COMMA           reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    OPEN_SQ         reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    STRING          reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    FLOAT           reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    INTEGER         reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    ID              reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    NOT             reduce using rule 41 (expr -> COLON ID SEMICOLON .)
    TIMES           reduce using rule 41 (expr -> COLON ID SEMICOLON .)


state 96

    (42) expr -> COLON ID args . SEMICOLON
    (18) args -> args . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    SEMICOLON       shift and go to state 110
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 111

state 97

    (17) args -> expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
    SEMICOLON       reduce using rule 17 (args -> expr .)
    OPEN_SQ         reduce using rule 17 (args -> expr .)
    STRING          reduce using rule 17 (args -> expr .)
    FLOAT           reduce using rule 17 (args -> expr .)
    INTEGER         reduce using rule 17 (args -> expr .)
    ID              reduce using rule 17 (args -> expr .)
    NOT             reduce using rule 17 (args -> expr .)
    COLON           shift and go to state 30
    COMPARE         shift and go to state 31
    NE              shift and go to state 32
    EQ              shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    EXP             shift and go to state 38
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42
    SUB             shift and go to state 43
    ADD             shift and go to state 44


state 98

    (43) expr -> expr COLON ID SEMICOLON .
    COLON           reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    COMPARE         reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    NE              reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    EQ              reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    GE              reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    LE              reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    GT              reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    LT              reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    EXP             reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    MOD             reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    FLOORDIV        reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    TRUEDIV         reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    MUL             reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    SUB             reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    ADD             reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    SEMICOLON       reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    NEWLINE         reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    OPEN_CB         reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    DO              reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    THEN            reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    CLOSE_SQ        reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    COMMA           reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    OPEN_SQ         reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    STRING          reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    FLOAT           reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    INTEGER         reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    ID              reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    NOT             reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)
    TIMES           reduce using rule 43 (expr -> expr COLON ID SEMICOLON .)


state 99

    (44) expr -> expr COLON ID args . SEMICOLON
    (18) args -> args . expr
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    SEMICOLON       shift and go to state 112
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 111

state 100

    (35) count_block -> DO OPEN_CB statements CLOSE_CB . expr TIMES
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    ID              shift and go to state 59
    NOT             shift and go to state 25
    SUB             shift and go to state 26

    expr                           shift and go to state 113

state 101

    (36) count_block -> DO NEWLINE statements expr . TIMES
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    (15) command -> expr .
    TIMES           shift and go to state 114
    COLON           shift and go to state 30
    COMPARE         shift and go to state 31
    NE              shift and go to state 32
    EQ              shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    EXP             shift and go to state 38
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42
    SUB             shift and go to state 43
    ADD             shift and go to state 44
    SEMICOLON       reduce using rule 15 (command -> expr .)
    NEWLINE         reduce using rule 15 (command -> expr .)


state 102

    (34) forever_block -> DO NEWLINE statements FOREVER .
    SEMICOLON       reduce using rule 34 (forever_block -> DO NEWLINE statements FOREVER .)
    NEWLINE         reduce using rule 34 (forever_block -> DO NEWLINE statements FOREVER .)
    OPEN_CB         reduce using rule 34 (forever_block -> DO NEWLINE statements FOREVER .)
    DO              reduce using rule 34 (forever_block -> DO NEWLINE statements FOREVER .)
    THEN            reduce using rule 34 (forever_block -> DO NEWLINE statements FOREVER .)


state 103

    (45) expr -> ID .
    (62) swap -> ID . SWAP ID
    (65) inplace -> ID . IP_DIV expr
    (66) inplace -> ID . IP_MUL expr
    (67) inplace -> ID . IP_SUB expr
    (68) inplace -> ID . IP_ADD expr
    (63) somecrement -> ID . DECREMENT
    (64) somecrement -> ID . INCREMENT
    (69) assign -> ID . ASSIGN expr
    TIMES           reduce using rule 45 (expr -> ID .)
    COLON           reduce using rule 45 (expr -> ID .)
    COMPARE         reduce using rule 45 (expr -> ID .)
    NE              reduce using rule 45 (expr -> ID .)
    EQ              reduce using rule 45 (expr -> ID .)
    GE              reduce using rule 45 (expr -> ID .)
    LE              reduce using rule 45 (expr -> ID .)
    GT              reduce using rule 45 (expr -> ID .)
    LT              reduce using rule 45 (expr -> ID .)
    EXP             reduce using rule 45 (expr -> ID .)
    MOD             reduce using rule 45 (expr -> ID .)
    FLOORDIV        reduce using rule 45 (expr -> ID .)
    TRUEDIV         reduce using rule 45 (expr -> ID .)
    MUL             reduce using rule 45 (expr -> ID .)
    SUB             reduce using rule 45 (expr -> ID .)
    ADD             reduce using rule 45 (expr -> ID .)
    SEMICOLON       reduce using rule 45 (expr -> ID .)
    NEWLINE         reduce using rule 45 (expr -> ID .)
    SWAP            shift and go to state 45
    IP_DIV          shift and go to state 46
    IP_MUL          shift and go to state 47
    IP_SUB          shift and go to state 48
    IP_ADD          shift and go to state 49
    DECREMENT       shift and go to state 50
    INCREMENT       shift and go to state 51
    ASSIGN          shift and go to state 52


state 104

    (30) while_block -> WHILE command OPEN_CB statements . CLOSE_CB
    (2) statements -> statements . statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    CLOSE_CB        shift and go to state 115
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    command                        shift and go to state 3
    statement                      shift and go to state 27
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    expr                           shift and go to state 13
    empty                          shift and go to state 14

state 105

    (31) while_block -> WHILE command DO statements . DONE
    (2) statements -> statements . statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    DONE            shift and go to state 116
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    command                        shift and go to state 3
    statement                      shift and go to state 27
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    expr                           shift and go to state 13
    empty                          shift and go to state 14

state 106

    (32) for_block -> FOR ID IN command . OPEN_CB statements CLOSE_CB
    (33) for_block -> FOR ID IN command . DO statements DONE
    OPEN_CB         shift and go to state 117
    DO              shift and go to state 118


state 107

    (19) if_block -> IF error THEN NEWLINE . statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> IF error THEN NEWLINE . statements elifs DONE
    (21) if_block -> IF error THEN NEWLINE . statements ELSE NEWLINE statements DONE
    (22) if_block -> IF error THEN NEWLINE . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    statements                     shift and go to state 119
    statement                      shift and go to state 2
    command                        shift and go to state 3
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    expr                           shift and go to state 13
    empty                          shift and go to state 14

state 108

    (23) if_block -> IF expr THEN NEWLINE . statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> IF expr THEN NEWLINE . statements elifs DONE
    (25) if_block -> IF expr THEN NEWLINE . statements ELSE NEWLINE statements DONE
    (26) if_block -> IF expr THEN NEWLINE . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    expr                           shift and go to state 13
    statements                     shift and go to state 120
    statement                      shift and go to state 2
    command                        shift and go to state 3
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    empty                          shift and go to state 14

state 109

    (71) list_items -> list_items COMMA expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    CLOSE_SQ        reduce using rule 71 (list_items -> list_items COMMA expr .)
    COMMA           reduce using rule 71 (list_items -> list_items COMMA expr .)
    COLON           shift and go to state 30
    COMPARE         shift and go to state 31
    NE              shift and go to state 32
    EQ              shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    EXP             shift and go to state 38
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42
    SUB             shift and go to state 43
    ADD             shift and go to state 44


state 110

    (42) expr -> COLON ID args SEMICOLON .
    COLON           reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    COMPARE         reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    NE              reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    EQ              reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    GE              reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    LE              reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    GT              reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    LT              reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    EXP             reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    MOD             reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    FLOORDIV        reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    TRUEDIV         reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    MUL             reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    SUB             reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    ADD             reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    SEMICOLON       reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    NEWLINE         reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    OPEN_CB         reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    DO              reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    THEN            reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    CLOSE_SQ        reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    COMMA           reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    OPEN_SQ         reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    STRING          reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    FLOAT           reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    INTEGER         reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    ID              reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    NOT             reduce using rule 42 (expr -> COLON ID args SEMICOLON .)
    TIMES           reduce using rule 42 (expr -> COLON ID args SEMICOLON .)


state 111

    (18) args -> args expr .
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
  ! shift/reduce conflict for COLON resolved as shift
  ! shift/reduce conflict for SUB resolved as shift
    SEMICOLON       reduce using rule 18 (args -> args expr .)
    OPEN_SQ         reduce using rule 18 (args -> args expr .)
    STRING          reduce using rule 18 (args -> args expr .)
    FLOAT           reduce using rule 18 (args -> args expr .)
    INTEGER         reduce using rule 18 (args -> args expr .)
    ID              reduce using rule 18 (args -> args expr .)
    NOT             reduce using rule 18 (args -> args expr .)
    COLON           shift and go to state 30
    COMPARE         shift and go to state 31
    NE              shift and go to state 32
    EQ              shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    EXP             shift and go to state 38
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42
    SUB             shift and go to state 43
    ADD             shift and go to state 44


state 112

    (44) expr -> expr COLON ID args SEMICOLON .
    COLON           reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    COMPARE         reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    NE              reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    EQ              reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    GE              reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    LE              reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    GT              reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    LT              reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    EXP             reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    MOD             reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    FLOORDIV        reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    TRUEDIV         reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    MUL             reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    SUB             reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    ADD             reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    SEMICOLON       reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    NEWLINE         reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    OPEN_CB         reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    DO              reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    THEN            reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    CLOSE_SQ        reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    COMMA           reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    OPEN_SQ         reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    STRING          reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    FLOAT           reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    INTEGER         reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    ID              reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    NOT             reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)
    TIMES           reduce using rule 44 (expr -> expr COLON ID args SEMICOLON .)


state 113

    (35) count_block -> DO OPEN_CB statements CLOSE_CB expr . TIMES
    (43) expr -> expr . COLON ID SEMICOLON
    (44) expr -> expr . COLON ID args SEMICOLON
    (48) expr -> expr . COMPARE expr
    (49) expr -> expr . NE expr
    (50) expr -> expr . EQ expr
    (51) expr -> expr . GE expr
    (52) expr -> expr . LE expr
    (53) expr -> expr . GT expr
    (54) expr -> expr . LT expr
    (55) expr -> expr . EXP expr
    (56) expr -> expr . MOD expr
    (57) expr -> expr . FLOORDIV expr
    (58) expr -> expr . TRUEDIV expr
    (59) expr -> expr . MUL expr
    (60) expr -> expr . SUB expr
    (61) expr -> expr . ADD expr
    TIMES           shift and go to state 121
    COLON           shift and go to state 30
    COMPARE         shift and go to state 31
    NE              shift and go to state 32
    EQ              shift and go to state 33
    GE              shift and go to state 34
    LE              shift and go to state 35
    GT              shift and go to state 36
    LT              shift and go to state 37
    EXP             shift and go to state 38
    MOD             shift and go to state 39
    FLOORDIV        shift and go to state 40
    TRUEDIV         shift and go to state 41
    MUL             shift and go to state 42
    SUB             shift and go to state 43
    ADD             shift and go to state 44


state 114

    (36) count_block -> DO NEWLINE statements expr TIMES .
    SEMICOLON       reduce using rule 36 (count_block -> DO NEWLINE statements expr TIMES .)
    NEWLINE         reduce using rule 36 (count_block -> DO NEWLINE statements expr TIMES .)
    OPEN_CB         reduce using rule 36 (count_block -> DO NEWLINE statements expr TIMES .)
    DO              reduce using rule 36 (count_block -> DO NEWLINE statements expr TIMES .)
    THEN            reduce using rule 36 (count_block -> DO NEWLINE statements expr TIMES .)


state 115

    (30) while_block -> WHILE command OPEN_CB statements CLOSE_CB .
    SEMICOLON       reduce using rule 30 (while_block -> WHILE command OPEN_CB statements CLOSE_CB .)
    NEWLINE         reduce using rule 30 (while_block -> WHILE command OPEN_CB statements CLOSE_CB .)
    OPEN_CB         reduce using rule 30 (while_block -> WHILE command OPEN_CB statements CLOSE_CB .)
    DO              reduce using rule 30 (while_block -> WHILE command OPEN_CB statements CLOSE_CB .)
    THEN            reduce using rule 30 (while_block -> WHILE command OPEN_CB statements CLOSE_CB .)


state 116

    (31) while_block -> WHILE command DO statements DONE .
    SEMICOLON       reduce using rule 31 (while_block -> WHILE command DO statements DONE .)
    NEWLINE         reduce using rule 31 (while_block -> WHILE command DO statements DONE .)
    OPEN_CB         reduce using rule 31 (while_block -> WHILE command DO statements DONE .)
    DO              reduce using rule 31 (while_block -> WHILE command DO statements DONE .)
    THEN            reduce using rule 31 (while_block -> WHILE command DO statements DONE .)


state 117

    (32) for_block -> FOR ID IN command OPEN_CB . statements CLOSE_CB
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    command                        shift and go to state 3
    statements                     shift and go to state 122
    statement                      shift and go to state 2
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    expr                           shift and go to state 13
    empty                          shift and go to state 14

state 118

    (33) for_block -> FOR ID IN command DO . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    command                        shift and go to state 3
    statements                     shift and go to state 123
    statement                      shift and go to state 2
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    expr                           shift and go to state 13
    empty                          shift and go to state 14

state 119

    (19) if_block -> IF error THEN NEWLINE statements . elifs ELSE NEWLINE statements DONE
    (20) if_block -> IF error THEN NEWLINE statements . elifs DONE
    (21) if_block -> IF error THEN NEWLINE statements . ELSE NEWLINE statements DONE
    (22) if_block -> IF error THEN NEWLINE statements . DONE
    (2) statements -> statements . statement
    (27) elifs -> . elif_block
    (28) elifs -> . elifs elif_block
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (29) elif_block -> . ELSE IF command THEN statements
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    ELSE            shift and go to state 125
    DONE            shift and go to state 126
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    elifs                          shift and go to state 124
    statement                      shift and go to state 27
    elif_block                     shift and go to state 127
    command                        shift and go to state 3
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    expr                           shift and go to state 13
    empty                          shift and go to state 14

state 120

    (23) if_block -> IF expr THEN NEWLINE statements . elifs ELSE NEWLINE statements DONE
    (24) if_block -> IF expr THEN NEWLINE statements . elifs DONE
    (25) if_block -> IF expr THEN NEWLINE statements . ELSE NEWLINE statements DONE
    (26) if_block -> IF expr THEN NEWLINE statements . DONE
    (2) statements -> statements . statement
    (27) elifs -> . elif_block
    (28) elifs -> . elifs elif_block
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (29) elif_block -> . ELSE IF command THEN statements
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    ELSE            shift and go to state 129
    DONE            shift and go to state 130
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    expr                           shift and go to state 13
    elifs                          shift and go to state 128
    statement                      shift and go to state 27
    elif_block                     shift and go to state 127
    command                        shift and go to state 3
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    empty                          shift and go to state 14

state 121

    (35) count_block -> DO OPEN_CB statements CLOSE_CB expr TIMES .
    SEMICOLON       reduce using rule 35 (count_block -> DO OPEN_CB statements CLOSE_CB expr TIMES .)
    NEWLINE         reduce using rule 35 (count_block -> DO OPEN_CB statements CLOSE_CB expr TIMES .)
    OPEN_CB         reduce using rule 35 (count_block -> DO OPEN_CB statements CLOSE_CB expr TIMES .)
    DO              reduce using rule 35 (count_block -> DO OPEN_CB statements CLOSE_CB expr TIMES .)
    THEN            reduce using rule 35 (count_block -> DO OPEN_CB statements CLOSE_CB expr TIMES .)


state 122

    (32) for_block -> FOR ID IN command OPEN_CB statements . CLOSE_CB
    (2) statements -> statements . statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    CLOSE_CB        shift and go to state 131
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    command                        shift and go to state 3
    statement                      shift and go to state 27
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    expr                           shift and go to state 13
    empty                          shift and go to state 14

state 123

    (33) for_block -> FOR ID IN command DO statements . DONE
    (2) statements -> statements . statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    DONE            shift and go to state 132
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    command                        shift and go to state 3
    statement                      shift and go to state 27
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    expr                           shift and go to state 13
    empty                          shift and go to state 14

state 124

    (19) if_block -> IF error THEN NEWLINE statements elifs . ELSE NEWLINE statements DONE
    (20) if_block -> IF error THEN NEWLINE statements elifs . DONE
    (28) elifs -> elifs . elif_block
    (29) elif_block -> . ELSE IF command THEN statements
    ELSE            shift and go to state 133
    DONE            shift and go to state 134

    elif_block                     shift and go to state 135

state 125

    (21) if_block -> IF error THEN NEWLINE statements ELSE . NEWLINE statements DONE
    (29) elif_block -> ELSE . IF command THEN statements
    NEWLINE         shift and go to state 137
    IF              shift and go to state 136


state 126

    (22) if_block -> IF error THEN NEWLINE statements DONE .
    SEMICOLON       reduce using rule 22 (if_block -> IF error THEN NEWLINE statements DONE .)
    NEWLINE         reduce using rule 22 (if_block -> IF error THEN NEWLINE statements DONE .)
    OPEN_CB         reduce using rule 22 (if_block -> IF error THEN NEWLINE statements DONE .)
    DO              reduce using rule 22 (if_block -> IF error THEN NEWLINE statements DONE .)
    THEN            reduce using rule 22 (if_block -> IF error THEN NEWLINE statements DONE .)


state 127

    (27) elifs -> elif_block .
    ELSE            reduce using rule 27 (elifs -> elif_block .)
    DONE            reduce using rule 27 (elifs -> elif_block .)


state 128

    (23) if_block -> IF expr THEN NEWLINE statements elifs . ELSE NEWLINE statements DONE
    (24) if_block -> IF expr THEN NEWLINE statements elifs . DONE
    (28) elifs -> elifs . elif_block
    (29) elif_block -> . ELSE IF command THEN statements
    ELSE            shift and go to state 138
    DONE            shift and go to state 139

    elif_block                     shift and go to state 135

state 129

    (25) if_block -> IF expr THEN NEWLINE statements ELSE . NEWLINE statements DONE
    (29) elif_block -> ELSE . IF command THEN statements
    NEWLINE         shift and go to state 140
    IF              shift and go to state 136


state 130

    (26) if_block -> IF expr THEN NEWLINE statements DONE .
    SEMICOLON       reduce using rule 26 (if_block -> IF expr THEN NEWLINE statements DONE .)
    NEWLINE         reduce using rule 26 (if_block -> IF expr THEN NEWLINE statements DONE .)
    OPEN_CB         reduce using rule 26 (if_block -> IF expr THEN NEWLINE statements DONE .)
    DO              reduce using rule 26 (if_block -> IF expr THEN NEWLINE statements DONE .)
    THEN            reduce using rule 26 (if_block -> IF expr THEN NEWLINE statements DONE .)


state 131

    (32) for_block -> FOR ID IN command OPEN_CB statements CLOSE_CB .
    SEMICOLON       reduce using rule 32 (for_block -> FOR ID IN command OPEN_CB statements CLOSE_CB .)
    NEWLINE         reduce using rule 32 (for_block -> FOR ID IN command OPEN_CB statements CLOSE_CB .)
    OPEN_CB         reduce using rule 32 (for_block -> FOR ID IN command OPEN_CB statements CLOSE_CB .)
    DO              reduce using rule 32 (for_block -> FOR ID IN command OPEN_CB statements CLOSE_CB .)
    THEN            reduce using rule 32 (for_block -> FOR ID IN command OPEN_CB statements CLOSE_CB .)


state 132

    (33) for_block -> FOR ID IN command DO statements DONE .
    SEMICOLON       reduce using rule 33 (for_block -> FOR ID IN command DO statements DONE .)
    NEWLINE         reduce using rule 33 (for_block -> FOR ID IN command DO statements DONE .)
    OPEN_CB         reduce using rule 33 (for_block -> FOR ID IN command DO statements DONE .)
    DO              reduce using rule 33 (for_block -> FOR ID IN command DO statements DONE .)
    THEN            reduce using rule 33 (for_block -> FOR ID IN command DO statements DONE .)


state 133

    (19) if_block -> IF error THEN NEWLINE statements elifs ELSE . NEWLINE statements DONE
    (29) elif_block -> ELSE . IF command THEN statements
    NEWLINE         shift and go to state 141
    IF              shift and go to state 136


state 134

    (20) if_block -> IF error THEN NEWLINE statements elifs DONE .
    SEMICOLON       reduce using rule 20 (if_block -> IF error THEN NEWLINE statements elifs DONE .)
    NEWLINE         reduce using rule 20 (if_block -> IF error THEN NEWLINE statements elifs DONE .)
    OPEN_CB         reduce using rule 20 (if_block -> IF error THEN NEWLINE statements elifs DONE .)
    DO              reduce using rule 20 (if_block -> IF error THEN NEWLINE statements elifs DONE .)
    THEN            reduce using rule 20 (if_block -> IF error THEN NEWLINE statements elifs DONE .)


state 135

    (28) elifs -> elifs elif_block .
    ELSE            reduce using rule 28 (elifs -> elifs elif_block .)
    DONE            reduce using rule 28 (elifs -> elifs elif_block .)


state 136

    (29) elif_block -> ELSE IF . command THEN statements
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    THEN            reduce using rule 5 (empty -> .)

    command                        shift and go to state 142
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    expr                           shift and go to state 13
    empty                          shift and go to state 14

state 137

    (21) if_block -> IF error THEN NEWLINE statements ELSE NEWLINE . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    statements                     shift and go to state 143
    statement                      shift and go to state 2
    command                        shift and go to state 3
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    expr                           shift and go to state 13
    empty                          shift and go to state 14

state 138

    (23) if_block -> IF expr THEN NEWLINE statements elifs ELSE . NEWLINE statements DONE
    (29) elif_block -> ELSE . IF command THEN statements
    NEWLINE         shift and go to state 144
    IF              shift and go to state 136


state 139

    (24) if_block -> IF expr THEN NEWLINE statements elifs DONE .
    SEMICOLON       reduce using rule 24 (if_block -> IF expr THEN NEWLINE statements elifs DONE .)
    NEWLINE         reduce using rule 24 (if_block -> IF expr THEN NEWLINE statements elifs DONE .)
    OPEN_CB         reduce using rule 24 (if_block -> IF expr THEN NEWLINE statements elifs DONE .)
    DO              reduce using rule 24 (if_block -> IF expr THEN NEWLINE statements elifs DONE .)
    THEN            reduce using rule 24 (if_block -> IF expr THEN NEWLINE statements elifs DONE .)


state 140

    (25) if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    expr                           shift and go to state 13
    statements                     shift and go to state 145
    statement                      shift and go to state 2
    command                        shift and go to state 3
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    empty                          shift and go to state 14

state 141

    (19) if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    statements                     shift and go to state 146
    statement                      shift and go to state 2
    command                        shift and go to state 3
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    expr                           shift and go to state 13
    empty                          shift and go to state 14

state 142

    (29) elif_block -> ELSE IF command . THEN statements
    THEN            shift and go to state 147


state 143

    (21) if_block -> IF error THEN NEWLINE statements ELSE NEWLINE statements . DONE
    (2) statements -> statements . statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    DONE            shift and go to state 148
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    statement                      shift and go to state 27
    command                        shift and go to state 3
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    expr                           shift and go to state 13
    empty                          shift and go to state 14

state 144

    (23) if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE . statements DONE
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    expr                           shift and go to state 13
    statements                     shift and go to state 149
    statement                      shift and go to state 2
    command                        shift and go to state 3
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    empty                          shift and go to state 14

state 145

    (25) if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE statements . DONE
    (2) statements -> statements . statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    DONE            shift and go to state 150
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    expr                           shift and go to state 13
    statement                      shift and go to state 27
    command                        shift and go to state 3
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    empty                          shift and go to state 14

state 146

    (19) if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE statements . DONE
    (2) statements -> statements . statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    DONE            shift and go to state 151
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    statement                      shift and go to state 27
    command                        shift and go to state 3
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    expr                           shift and go to state 13
    empty                          shift and go to state 14

state 147

    (29) elif_block -> ELSE IF command THEN . statements
    (1) statements -> . statement
    (2) statements -> . statements statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    command                        shift and go to state 3
    statements                     shift and go to state 152
    statement                      shift and go to state 2
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    expr                           shift and go to state 13
    empty                          shift and go to state 14

state 148

    (21) if_block -> IF error THEN NEWLINE statements ELSE NEWLINE statements DONE .
    SEMICOLON       reduce using rule 21 (if_block -> IF error THEN NEWLINE statements ELSE NEWLINE statements DONE .)
    NEWLINE         reduce using rule 21 (if_block -> IF error THEN NEWLINE statements ELSE NEWLINE statements DONE .)
    OPEN_CB         reduce using rule 21 (if_block -> IF error THEN NEWLINE statements ELSE NEWLINE statements DONE .)
    DO              reduce using rule 21 (if_block -> IF error THEN NEWLINE statements ELSE NEWLINE statements DONE .)
    THEN            reduce using rule 21 (if_block -> IF error THEN NEWLINE statements ELSE NEWLINE statements DONE .)


state 149

    (23) if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements . DONE
    (2) statements -> statements . statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    DONE            shift and go to state 153
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    expr                           shift and go to state 13
    statement                      shift and go to state 27
    command                        shift and go to state 3
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    empty                          shift and go to state 14

state 150

    (25) if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE .
    SEMICOLON       reduce using rule 25 (if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE .)
    NEWLINE         reduce using rule 25 (if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE .)
    OPEN_CB         reduce using rule 25 (if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE .)
    DO              reduce using rule 25 (if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE .)
    THEN            reduce using rule 25 (if_block -> IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE .)


state 151

    (19) if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .
    SEMICOLON       reduce using rule 19 (if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)
    NEWLINE         reduce using rule 19 (if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)
    OPEN_CB         reduce using rule 19 (if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)
    DO              reduce using rule 19 (if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)
    THEN            reduce using rule 19 (if_block -> IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)


state 152

    (29) elif_block -> ELSE IF command THEN statements .
    (2) statements -> statements . statement
    (3) statement -> . command SEMICOLON
    (4) statement -> . command NEWLINE
    (6) command -> . swap
    (7) command -> . inplace
    (8) command -> . somecrement
    (9) command -> . assign
    (10) command -> . count_block
    (11) command -> . forever_block
    (12) command -> . while_block
    (13) command -> . for_block
    (14) command -> . if_block
    (15) command -> . expr
    (16) command -> . empty
    (62) swap -> . ID SWAP ID
    (65) inplace -> . ID IP_DIV expr
    (66) inplace -> . ID IP_MUL expr
    (67) inplace -> . ID IP_SUB expr
    (68) inplace -> . ID IP_ADD expr
    (63) somecrement -> . ID DECREMENT
    (64) somecrement -> . ID INCREMENT
    (69) assign -> . ID ASSIGN expr
    (35) count_block -> . DO OPEN_CB statements CLOSE_CB expr TIMES
    (36) count_block -> . DO NEWLINE statements expr TIMES
    (34) forever_block -> . DO NEWLINE statements FOREVER
    (30) while_block -> . WHILE command OPEN_CB statements CLOSE_CB
    (31) while_block -> . WHILE command DO statements DONE
    (32) for_block -> . FOR ID IN command OPEN_CB statements CLOSE_CB
    (33) for_block -> . FOR ID IN command DO statements DONE
    (19) if_block -> . IF error THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (20) if_block -> . IF error THEN NEWLINE statements elifs DONE
    (21) if_block -> . IF error THEN NEWLINE statements ELSE NEWLINE statements DONE
    (22) if_block -> . IF error THEN NEWLINE statements DONE
    (23) if_block -> . IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE
    (24) if_block -> . IF expr THEN NEWLINE statements elifs DONE
    (25) if_block -> . IF expr THEN NEWLINE statements ELSE NEWLINE statements DONE
    (26) if_block -> . IF expr THEN NEWLINE statements DONE
    (37) expr -> . OPEN_SQ list_items CLOSE_SQ
    (38) expr -> . STRING
    (39) expr -> . FLOAT
    (40) expr -> . INTEGER
    (41) expr -> . COLON ID SEMICOLON
    (42) expr -> . COLON ID args SEMICOLON
    (43) expr -> . expr COLON ID SEMICOLON
    (44) expr -> . expr COLON ID args SEMICOLON
    (45) expr -> . ID
    (46) expr -> . NOT expr
    (47) expr -> . SUB expr
    (48) expr -> . expr COMPARE expr
    (49) expr -> . expr NE expr
    (50) expr -> . expr EQ expr
    (51) expr -> . expr GE expr
    (52) expr -> . expr LE expr
    (53) expr -> . expr GT expr
    (54) expr -> . expr LT expr
    (55) expr -> . expr EXP expr
    (56) expr -> . expr MOD expr
    (57) expr -> . expr FLOORDIV expr
    (58) expr -> . expr TRUEDIV expr
    (59) expr -> . expr MUL expr
    (60) expr -> . expr SUB expr
    (61) expr -> . expr ADD expr
    (5) empty -> .
    ELSE            reduce using rule 29 (elif_block -> ELSE IF command THEN statements .)
    DONE            reduce using rule 29 (elif_block -> ELSE IF command THEN statements .)
    ID              shift and go to state 15
    DO              shift and go to state 16
    WHILE           shift and go to state 17
    FOR             shift and go to state 18
    IF              shift and go to state 19
    OPEN_SQ         shift and go to state 20
    STRING          shift and go to state 21
    FLOAT           shift and go to state 22
    INTEGER         shift and go to state 23
    COLON           shift and go to state 24
    NOT             shift and go to state 25
    SUB             shift and go to state 26
    SEMICOLON       reduce using rule 5 (empty -> .)
    NEWLINE         reduce using rule 5 (empty -> .)

    command                        shift and go to state 3
    statement                      shift and go to state 27
    swap                           shift and go to state 4
    inplace                        shift and go to state 5
    somecrement                    shift and go to state 6
    assign                         shift and go to state 7
    count_block                    shift and go to state 8
    forever_block                  shift and go to state 9
    while_block                    shift and go to state 10
    for_block                      shift and go to state 11
    if_block                       shift and go to state 12
    expr                           shift and go to state 13
    empty                          shift and go to state 14

state 153

    (23) if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .
    SEMICOLON       reduce using rule 23 (if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)
    NEWLINE         reduce using rule 23 (if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)
    OPEN_CB         reduce using rule 23 (if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)
    DO              reduce using rule 23 (if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)
    THEN            reduce using rule 23 (if_block -> IF expr THEN NEWLINE statements elifs ELSE NEWLINE statements DONE .)


Conflicts:

shift/reduce conflict for DO in state 17 resolved as shift
shift/reduce conflict for COLON in state 63 resolved as shift
shift/reduce conflict for COMPARE in state 63 resolved as shift
shift/reduce conflict for NE in state 63 resolved as shift
shift/reduce conflict for EQ in state 63 resolved as shift
shift/reduce conflict for GE in state 63 resolved as shift
shift/reduce conflict for LE in state 63 resolved as shift
shift/reduce conflict for GT in state 63 resolved as shift
shift/reduce conflict for LT in state 63 resolved as shift
shift/reduce conflict for EXP in state 63 resolved as shift
shift/reduce conflict for MOD in state 63 resolved as shift
shift/reduce conflict for FLOORDIV in state 63 resolved as shift
shift/reduce conflict for TRUEDIV in state 63 resolved as shift
shift/reduce conflict for MUL in state 63 resolved as shift
shift/reduce conflict for SUB in state 63 resolved as shift
shift/reduce conflict for ADD in state 63 resolved as shift
shift/reduce conflict for COLON in state 73 resolved as shift
shift/reduce conflict for COMPARE in state 73 resolved as shift
shift/reduce conflict for NE in state 73 resolved as shift
shift/reduce conflict for EQ in state 73 resolved as shift
shift/reduce conflict for GE in state 73 resolved as shift
shift/reduce conflict for LE in state 73 resolved as shift
shift/reduce conflict for GT in state 73 resolved as shift
shift/reduce conflict for LT in state 73 resolved as shift
shift/reduce conflict for EXP in state 73 resolved as shift
shift/reduce conflict for MOD in state 73 resolved as shift
shift/reduce conflict for FLOORDIV in state 73 resolved as shift
shift/reduce conflict for TRUEDIV in state 73 resolved as shift
shift/reduce conflict for MUL in state 73 resolved as shift
shift/reduce conflict for SUB in state 73 resolved as shift
shift/reduce conflict for ADD in state 73 resolved as shift
shift/reduce conflict for DO in state 90 resolved as shift
shift/reduce conflict for COLON in state 97 resolved as shift
shift/reduce conflict for SUB in state 97 resolved as shift
shift/reduce conflict for COLON in state 111 resolved as shift
shift/reduce conflict for SUB in state 111 resolved as shift